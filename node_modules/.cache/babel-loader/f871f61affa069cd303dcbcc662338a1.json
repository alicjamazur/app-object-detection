{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getValidateBucketNamePlugin = exports.validateBucketNameMiddlewareOptions = exports.validateBucketNameMiddleware = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nfunction validateBucketNameMiddleware() {\n  var _this = this;\n\n  return function (next) {\n    return function (args) {\n      return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var input, err;\n        return tslib_1.__generator(this, function (_a) {\n          input = args.input;\n\n          if (typeof input.Bucket === \"string\" && input.Bucket.indexOf(\"/\") >= 0) {\n            err = new Error(\"Bucket name shouldn't contain '/', received '\" + input.Bucket + \"'\");\n            err.name = \"InvalidBucketName\";\n            throw err;\n          }\n\n          return [2\n          /*return*/\n          , next(tslib_1.__assign({}, args))];\n        });\n      });\n    };\n  };\n}\n\nexports.validateBucketNameMiddleware = validateBucketNameMiddleware;\nexports.validateBucketNameMiddlewareOptions = {\n  step: \"initialize\",\n  tags: [\"VALIDATE_BUCKET_NAME\"],\n  name: \"validateBucketNameMiddleware\"\n}; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nexports.getValidateBucketNamePlugin = function (unused) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(validateBucketNameMiddleware(), exports.validateBucketNameMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["../../src/validate-bucket-name.ts"],"names":[],"mappings":";;;;;;;;;AAUA,SAAgB,4BAAhB,GAA4C;AAA5C,MAAA,KAAA,GAAA,IAAA;;AACE,SAAO,UACL,IADK,EAC+B;AACD,WAAA,UACnC,IADmC,EACE;AAAA,aAAA,OAAA,CAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;AAE7B,UAAA,KAAK,GAAK,IAAI,CAAT,KAAL;;AACR,cAAI,OAAO,KAAK,CAAC,MAAb,KAAwB,QAAxB,IAAoC,KAAK,CAAC,MAAN,CAAa,OAAb,CAAqB,GAArB,KAA6B,CAArE,EAAwE;AAChE,YAAA,GAAG,GAAG,IAAI,KAAJ,CAAU,kDAAgD,KAAK,CAAC,MAAtD,GAA4D,GAAtE,CAAN;AACN,YAAA,GAAG,CAAC,IAAJ,GAAW,mBAAX;AACA,kBAAM,GAAN;AACD;;AACD,iBAAA,CAAA;AAAA;AAAA,YAAO,IAAI,CAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EAAM,IAAN,CAAA,CAAX,CAAA;;OARqC,CAAA;AADF,KAAA;AAUpC,GAZD;AAaD;;AAdD,OAAA,CAAA,4BAAA,GAAA,4BAAA;AAgBa,OAAA,CAAA,mCAAA,GAAgE;AAC3E,EAAA,IAAI,EAAE,YADqE;AAE3E,EAAA,IAAI,EAAE,CAAC,sBAAD,CAFqE;AAG3E,EAAA,IAAI,EAAE;AAHqE,CAAhE,C,CAMb;;AACa,OAAA,CAAA,2BAAA,GAA8B,UAAC,MAAD,EAAY;AAA0B,SAAC;AAChF,IAAA,YAAY,EAAE,UAAC,WAAD,EAAY;AACxB,MAAA,WAAW,CAAC,GAAZ,CAAgB,4BAA4B,EAA5C,EAAgD,OAAA,CAAA,mCAAhD;AACD;AAH+E,GAAD;AAI/E,CAJW","sourcesContent":["import {\n  InitializeHandler,\n  InitializeHandlerArguments,\n  InitializeHandlerOptions,\n  InitializeHandlerOutput,\n  InitializeMiddleware,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\nexport function validateBucketNameMiddleware(): InitializeMiddleware<any, any> {\n  return <Output extends MetadataBearer>(\n    next: InitializeHandler<any, Output>\n  ): InitializeHandler<any, Output> => async (\n    args: InitializeHandlerArguments<any>\n  ): Promise<InitializeHandlerOutput<Output>> => {\n    const { input } = args;\n    if (typeof input.Bucket === \"string\" && input.Bucket.indexOf(\"/\") >= 0) {\n      const err = new Error(`Bucket name shouldn't contain '/', received '${input.Bucket}'`);\n      err.name = \"InvalidBucketName\";\n      throw err;\n    }\n    return next({ ...args });\n  };\n}\n\nexport const validateBucketNameMiddlewareOptions: InitializeHandlerOptions = {\n  step: \"initialize\",\n  tags: [\"VALIDATE_BUCKET_NAME\"],\n  name: \"validateBucketNameMiddleware\",\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const getValidateBucketNamePlugin = (unused: any): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(validateBucketNameMiddleware(), validateBucketNameMiddlewareOptions);\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}