{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MiddlewareStack = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar MiddlewareStack =\n/** @class */\nfunction () {\n  function MiddlewareStack() {\n    this.absoluteEntries = [];\n    this.relativeEntries = [];\n    this.entriesNameMap = {};\n  }\n\n  MiddlewareStack.prototype.add = function (middleware, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var name = options.name,\n        _a = options.step,\n        step = _a === void 0 ? \"initialize\" : _a,\n        tags = options.tags,\n        _b = options.priority,\n        priority = _b === void 0 ? \"normal\" : _b;\n    var entry = {\n      name: name,\n      step: step,\n      tags: tags,\n      priority: priority,\n      middleware: middleware\n    };\n\n    if (name) {\n      if (Object.prototype.hasOwnProperty.call(this.entriesNameMap, name)) {\n        throw new Error(\"Duplicated middleware name '\" + name + \"'\");\n      }\n\n      this.entriesNameMap[name] = entry;\n    }\n\n    this.absoluteEntries.push(entry);\n  };\n\n  MiddlewareStack.prototype.addRelativeTo = function (middleware, options) {\n    var _a = options.step,\n        step = _a === void 0 ? \"initialize\" : _a,\n        name = options.name,\n        tags = options.tags,\n        relation = options.relation,\n        toMiddleware = options.toMiddleware;\n    var entry = {\n      middleware: middleware,\n      step: step,\n      name: name,\n      tags: tags,\n      next: relation === \"before\" ? toMiddleware : undefined,\n      prev: relation === \"after\" ? toMiddleware : undefined\n    };\n\n    if (name) {\n      if (Object.prototype.hasOwnProperty.call(this.entriesNameMap, name)) {\n        throw new Error(\"Duplicated middleware name '\" + name + \"'\");\n      }\n\n      this.entriesNameMap[name] = entry;\n    }\n\n    this.relativeEntries.push(entry);\n  };\n\n  MiddlewareStack.prototype.sort = function (entries) {\n    //reverse before sorting so that middleware of same step will execute in\n    //the order of being added\n    return entries.sort(function (a, b) {\n      return stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"];\n    });\n  };\n\n  MiddlewareStack.prototype.clone = function () {\n    var _a, _b;\n\n    var clone = new MiddlewareStack();\n\n    (_a = clone.absoluteEntries).push.apply(_a, tslib_1.__spread(this.absoluteEntries));\n\n    (_b = clone.relativeEntries).push.apply(_b, tslib_1.__spread(this.relativeEntries));\n\n    clone.entriesNameMap = tslib_1.__assign({}, this.entriesNameMap);\n    return clone;\n  };\n\n  MiddlewareStack.prototype.concat = function (from) {\n    var _a, _b;\n\n    var clone = new MiddlewareStack();\n    clone.entriesNameMap = tslib_1.__assign({}, this.entriesNameMap); // IMiddlewareStack interface doesn't contain private members variables\n    // like `entriesNameMap`, but in fact the function expects `MiddlewareStack`\n    // class instance. So here we cast it.\n\n    var _from = from;\n\n    for (var name in _from.entriesNameMap) {\n      if (clone.entriesNameMap[name]) {\n        throw new Error(\"Duplicated middleware name '\" + name + \"'\");\n      }\n\n      clone.entriesNameMap[name] = _from.entriesNameMap[name];\n    }\n\n    (_a = clone.absoluteEntries).push.apply(_a, tslib_1.__spread(this.absoluteEntries, _from.absoluteEntries));\n\n    (_b = clone.relativeEntries).push.apply(_b, tslib_1.__spread(this.relativeEntries, _from.relativeEntries));\n\n    return clone;\n  };\n\n  MiddlewareStack.prototype.remove = function (toRemove) {\n    if (typeof toRemove === \"string\") return this.removeByName(toRemove);else return this.removeByReference(toRemove);\n  };\n\n  MiddlewareStack.prototype.removeByName = function (toRemove) {\n    for (var i = this.absoluteEntries.length - 1; i >= 0; i--) {\n      if (this.absoluteEntries[i].name && this.absoluteEntries[i].name === toRemove) {\n        this.absoluteEntries.splice(i, 1);\n        delete this.entriesNameMap[toRemove];\n        return true;\n      }\n    }\n\n    for (var i = this.relativeEntries.length - 1; i >= 0; i--) {\n      if (this.relativeEntries[i].name && this.relativeEntries[i].name === toRemove) {\n        this.relativeEntries.splice(i, 1);\n        delete this.entriesNameMap[toRemove];\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  MiddlewareStack.prototype.removeByReference = function (toRemove) {\n    for (var i = this.absoluteEntries.length - 1; i >= 0; i--) {\n      if (this.absoluteEntries[i].middleware === toRemove) {\n        var name = this.absoluteEntries[i].name;\n        if (name) delete this.entriesNameMap[name];\n        this.absoluteEntries.splice(i, 1);\n        return true;\n      }\n    }\n\n    for (var i = this.relativeEntries.length - 1; i >= 0; i--) {\n      if (this.relativeEntries[i].middleware === toRemove) {\n        var name = this.relativeEntries[i].name;\n        if (name) delete this.entriesNameMap[name];\n        this.relativeEntries.splice(i, 1);\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  MiddlewareStack.prototype.removeByTag = function (toRemove) {\n    var removed = false;\n\n    for (var i = this.absoluteEntries.length - 1; i >= 0; i--) {\n      var _a = this.absoluteEntries[i],\n          tags = _a.tags,\n          name = _a.name;\n\n      if (tags && tags.indexOf(toRemove) > -1) {\n        this.absoluteEntries.splice(i, 1);\n        if (name) delete this.entriesNameMap[name];\n        removed = true;\n      }\n    }\n\n    for (var i = this.relativeEntries.length - 1; i >= 0; i--) {\n      var _b = this.relativeEntries[i],\n          tags = _b.tags,\n          name = _b.name;\n\n      if (tags && tags.indexOf(toRemove) > -1) {\n        this.relativeEntries.splice(i, 1);\n        if (name) delete this.entriesNameMap[name];\n        removed = true;\n      }\n    }\n\n    return removed;\n  };\n\n  MiddlewareStack.prototype.use = function (plugin) {\n    plugin.applyToStack(this);\n  };\n  /**\n   * Resolve relative middleware entries to multiple double linked lists\n   * depicting the relative location of middleware. Only middleware that have\n   * direct or transitive relation will form a linked list.\n   *\n   * This function normalizes relative middleware into 2 categories of linked\n   * lists. (1) linked list that have absolute-located middleware on one end.\n   * These middleware will be resolved accordingly before or after the absolute-\n   * located middleware. (2) Linked list that have no absolute-located middleware\n   * on any end. They will be resolved to corresponding step with normal priority\n   *\n   * The 2 types of linked list will return as a tuple\n   */\n\n\n  MiddlewareStack.prototype.normalizeRelativeEntries = function () {\n    var e_1, _a;\n\n    var absoluteMiddlewareNamesMap = this.absoluteEntries.filter(function (entry) {\n      return entry.name;\n    }).reduce(function (accumulator, entry) {\n      accumulator[entry.name] = entry;\n      return accumulator;\n    }, {});\n    var normalized = this.relativeEntries.map(function (entry) {\n      return tslib_1.__assign(tslib_1.__assign({}, entry), {\n        priority: null,\n        next: undefined,\n        prev: undefined\n      });\n    });\n    var relativeMiddlewareNamesMap = normalized.filter(function (entry) {\n      return entry.name;\n    }).reduce(function (accumulator, entry) {\n      accumulator[entry.name] = entry;\n      return accumulator;\n    }, {});\n    var anchors = {};\n\n    for (var i = 0; i < this.relativeEntries.length; i++) {\n      var _b = this.relativeEntries[i],\n          prev = _b.prev,\n          next = _b.next;\n      var resolvedCurr = normalized[i]; //either prev or next is set\n\n      if (prev) {\n        if (absoluteMiddlewareNamesMap[prev] && absoluteMiddlewareNamesMap[prev].step === resolvedCurr.step) {\n          if (!anchors[prev]) anchors[prev] = {};\n          resolvedCurr.next = anchors[prev].next;\n          if (anchors[prev].next) anchors[prev].next.prev = resolvedCurr;\n          anchors[prev].next = resolvedCurr;\n        } else if (relativeMiddlewareNamesMap[prev] && relativeMiddlewareNamesMap[prev].step === resolvedCurr.step) {\n          var resolvedPrev = relativeMiddlewareNamesMap[prev];\n          if (resolvedPrev.next === resolvedCurr) continue;\n          resolvedCurr.next = resolvedPrev.next;\n          resolvedPrev.next = resolvedCurr;\n          if (resolvedCurr.next) resolvedCurr.next.prev = resolvedCurr;\n          resolvedCurr.prev = resolvedPrev;\n        }\n      } else if (next) {\n        if (absoluteMiddlewareNamesMap[next] && absoluteMiddlewareNamesMap[next].step === resolvedCurr.step) {\n          if (!anchors[next]) anchors[next] = {};\n          resolvedCurr.prev = anchors[next].prev;\n          if (anchors[next].prev) anchors[next].prev.next = resolvedCurr;\n          anchors[next].prev = resolvedCurr;\n        } else if (relativeMiddlewareNamesMap[next] && relativeMiddlewareNamesMap[next].step === resolvedCurr.step) {\n          var resolvedNext = relativeMiddlewareNamesMap[next];\n          if (resolvedNext.prev === resolvedCurr) continue;\n          resolvedCurr.prev = resolvedNext.prev;\n          resolvedNext.prev = resolvedCurr;\n          if (resolvedCurr.prev) resolvedCurr.prev.next = resolvedCurr;\n          resolvedCurr.next = resolvedNext;\n        }\n      }\n    } // get the head of the relative middleware linked list that have\n    // no transitive relation to absolute middleware.\n\n\n    var orphanedRelativeEntries = [];\n    var visited = new WeakSet();\n\n    try {\n      for (var _c = tslib_1.__values(Object.keys(anchors)), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var anchorName = _d.value;\n        var _e = anchors[anchorName],\n            prev = _e.prev,\n            next = _e.next;\n\n        while (prev) {\n          visited.add(prev);\n          prev = prev.prev;\n        }\n\n        while (next) {\n          visited.add(next);\n          next = next.next;\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    for (var i = 0; i < normalized.length; i++) {\n      var entry = normalized[i];\n      if (visited.has(entry)) continue;\n      if (!entry.prev) orphanedRelativeEntries.push(entry);\n\n      while (entry && !visited.has(entry)) {\n        visited.add(entry);\n        entry = entry.next;\n      }\n    }\n\n    return [orphanedRelativeEntries, anchors];\n  };\n  /**\n   * Get a final list of middleware in the order of being executed in the resolved handler.\n   * If relative entries list is not empty, those entries will be added to final middleware\n   * list with rules below:\n   * 1. if `toMiddleware` exists in the specific `step`, the middleware will be inserted before\n   *     or after the specified `toMiddleware`\n   * 2. if `toMiddleware` doesn't exist in the specific `step`, the middleware will be appended\n   *     to specific `step` with priority of `normal`\n   */\n\n\n  MiddlewareStack.prototype.getMiddlewareList = function () {\n    var e_2, _a;\n\n    var middlewareList = [];\n\n    var _b = tslib_1.__read(this.normalizeRelativeEntries(), 2),\n        orphanedRelativeEntries = _b[0],\n        anchors = _b[1];\n\n    var entryList = tslib_1.__spread(this.absoluteEntries, orphanedRelativeEntries);\n\n    entryList = this.sort(entryList);\n\n    try {\n      for (var entryList_1 = tslib_1.__values(entryList), entryList_1_1 = entryList_1.next(); !entryList_1_1.done; entryList_1_1 = entryList_1.next()) {\n        var entry = entryList_1_1.value;\n        var defaultAnchorValue = {\n          prev: undefined,\n          next: undefined\n        };\n\n        var _c = entry.name ? anchors[entry.name] || defaultAnchorValue : defaultAnchorValue,\n            prev = _c.prev,\n            next = _c.next;\n\n        var relativeEntry = prev; //reverse relative entry linked list and add to ordered handler list\n\n        while (relativeEntry === null || relativeEntry === void 0 ? void 0 : relativeEntry.prev) {\n          relativeEntry = relativeEntry.prev;\n        }\n\n        while (relativeEntry) {\n          middlewareList.push(relativeEntry.middleware);\n          relativeEntry = relativeEntry.next;\n        }\n\n        middlewareList.push(entry.middleware);\n        var orphanedEntry = entry;\n\n        while (orphanedEntry.next) {\n          middlewareList.push(orphanedEntry.next.middleware);\n          orphanedEntry = orphanedEntry.next;\n        }\n\n        relativeEntry = next;\n\n        while (relativeEntry) {\n          middlewareList.push(relativeEntry.middleware);\n          relativeEntry = relativeEntry.next;\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (entryList_1_1 && !entryList_1_1.done && (_a = entryList_1.return)) _a.call(entryList_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    return middlewareList.reverse();\n  };\n\n  MiddlewareStack.prototype.resolve = function (handler, context) {\n    var e_3, _a;\n\n    try {\n      for (var _b = tslib_1.__values(this.getMiddlewareList()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var middleware = _c.value;\n        handler = middleware(handler, context);\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    return handler;\n  };\n\n  return MiddlewareStack;\n}();\n\nexports.MiddlewareStack = MiddlewareStack;\nvar stepWeights = {\n  initialize: 5,\n  serialize: 4,\n  build: 3,\n  finalizeRequest: 2,\n  deserialize: 1\n};\nvar priorityWeights = {\n  high: 3,\n  normal: 2,\n  low: 1\n};","map":{"version":3,"sources":["../../src/MiddlewareStack.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AbsoluteLocation,\n  BuildHandlerOptions,\n  BuildMiddleware,\n  DeserializeHandler,\n  DeserializeHandlerOptions,\n  DeserializeMiddleware,\n  FinalizeRequestHandlerOptions,\n  FinalizeRequestMiddleware,\n  Handler,\n  HandlerExecutionContext,\n  HandlerOptions,\n  InitializeHandlerOptions,\n  InitializeMiddleware,\n  MiddlewareStack as IMiddlewareStack,\n  MiddlewareType,\n  Pluggable,\n  Priority,\n  RelativeLocation,\n  SerializeHandlerOptions,\n  SerializeMiddleware,\n  Step,\n} from \"@aws-sdk/types\";\n\nimport {\n  MiddlewareEntry,\n  NamedMiddlewareEntriesMap,\n  NamedRelativeEntriesMap,\n  NormalizedRelativeEntry,\n  NormalizingEntryResult,\n  RelativeMiddlewareAnchor,\n  RelativeMiddlewareEntry,\n} from \"./types\";\n\nexport interface MiddlewareStack<Input extends object, Output extends object> extends IMiddlewareStack<Input, Output> {}\n\nexport class MiddlewareStack<Input extends object, Output extends object> {\n  private readonly absoluteEntries: Array<MiddlewareEntry<Input, Output>> = [];\n  private readonly relativeEntries: Array<RelativeMiddlewareEntry<Input, Output>> = [];\n  private entriesNameMap: {\n    [middlewareName: string]: MiddlewareEntry<Input, Output> | RelativeMiddlewareEntry<Input, Output>;\n  } = {};\n\n  add(middleware: InitializeMiddleware<Input, Output>, options?: InitializeHandlerOptions & AbsoluteLocation): void;\n\n  add(middleware: SerializeMiddleware<Input, Output>, options: SerializeHandlerOptions & AbsoluteLocation): void;\n\n  add(middleware: BuildMiddleware<Input, Output>, options: BuildHandlerOptions & AbsoluteLocation): void;\n\n  add(\n    middleware: FinalizeRequestMiddleware<Input, Output>,\n    options: FinalizeRequestHandlerOptions & AbsoluteLocation\n  ): void;\n\n  add(middleware: DeserializeMiddleware<Input, Output>, options: DeserializeHandlerOptions & AbsoluteLocation): void;\n\n  add(middleware: MiddlewareType<Input, Output>, options: HandlerOptions & AbsoluteLocation = {}): void {\n    const { name, step = \"initialize\", tags, priority = \"normal\" } = options;\n    const entry: MiddlewareEntry<Input, Output> = {\n      name,\n      step,\n      tags,\n      priority,\n      middleware,\n    };\n    if (name) {\n      if (Object.prototype.hasOwnProperty.call(this.entriesNameMap, name)) {\n        throw new Error(`Duplicated middleware name '${name}'`);\n      }\n      this.entriesNameMap[name] = entry;\n    }\n    this.absoluteEntries.push(entry);\n  }\n\n  addRelativeTo(\n    middleware: InitializeMiddleware<Input, Output>,\n    options: InitializeHandlerOptions & RelativeLocation<Input, Output>\n  ): void;\n\n  addRelativeTo(\n    middleware: SerializeMiddleware<Input, Output>,\n    options: SerializeHandlerOptions & RelativeLocation<Input, Output>\n  ): void;\n\n  addRelativeTo(\n    middleware: BuildMiddleware<Input, Output>,\n    options: BuildHandlerOptions & RelativeLocation<Input, Output>\n  ): void;\n\n  addRelativeTo(\n    middleware: FinalizeRequestMiddleware<Input, Output>,\n    options: FinalizeRequestHandlerOptions & RelativeLocation<Input, Output>\n  ): void;\n\n  addRelativeTo(\n    middleware: DeserializeMiddleware<Input, Output>,\n    options: DeserializeHandlerOptions & RelativeLocation<Input, Output>\n  ): void;\n\n  addRelativeTo(\n    middleware: MiddlewareType<Input, Output>,\n    options: HandlerOptions & RelativeLocation<Input, Output>\n  ): void {\n    const { step = \"initialize\", name, tags, relation, toMiddleware } = options;\n    const entry: RelativeMiddlewareEntry<Input, Output> = {\n      middleware,\n      step,\n      name,\n      tags,\n      next: relation === \"before\" ? toMiddleware : undefined,\n      prev: relation === \"after\" ? toMiddleware : undefined,\n    };\n    if (name) {\n      if (Object.prototype.hasOwnProperty.call(this.entriesNameMap, name)) {\n        throw new Error(`Duplicated middleware name '${name}'`);\n      }\n      this.entriesNameMap[name] = entry;\n    }\n    this.relativeEntries.push(entry);\n  }\n\n  private sort(\n    entries: Array<MiddlewareEntry<Input, Output> | NormalizedRelativeEntry<Input, Output>>\n  ): Array<MiddlewareEntry<Input, Output> | NormalizedRelativeEntry<Input, Output>> {\n    //reverse before sorting so that middleware of same step will execute in\n    //the order of being added\n    return entries.sort(\n      (a, b) =>\n        stepWeights[b.step] - stepWeights[a.step] ||\n        priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"]\n    );\n  }\n\n  clone(): IMiddlewareStack<Input, Output> {\n    const clone = new MiddlewareStack<Input, Output>();\n    clone.absoluteEntries.push(...this.absoluteEntries);\n    clone.relativeEntries.push(...this.relativeEntries);\n    clone.entriesNameMap = { ...this.entriesNameMap };\n    return clone;\n  }\n\n  concat<InputType extends Input, OutputType extends Output>(\n    from: IMiddlewareStack<InputType, OutputType>\n  ): MiddlewareStack<InputType, OutputType> {\n    const clone = new MiddlewareStack<InputType, OutputType>();\n    clone.entriesNameMap = { ...(this.entriesNameMap as any) };\n    // IMiddlewareStack interface doesn't contain private members variables\n    // like `entriesNameMap`, but in fact the function expects `MiddlewareStack`\n    // class instance. So here we cast it.\n    const _from = from as MiddlewareStack<InputType, OutputType>;\n    for (const name in _from.entriesNameMap) {\n      if (clone.entriesNameMap[name]) {\n        throw new Error(`Duplicated middleware name '${name}'`);\n      }\n      clone.entriesNameMap[name] = _from.entriesNameMap[name];\n    }\n    clone.absoluteEntries.push(...(this.absoluteEntries as any), ..._from.absoluteEntries);\n    clone.relativeEntries.push(...(this.relativeEntries as any), ..._from.relativeEntries);\n    return clone;\n  }\n\n  remove(toRemove: MiddlewareType<Input, Output> | string): boolean {\n    if (typeof toRemove === \"string\") return this.removeByName(toRemove);\n    else return this.removeByReference(toRemove);\n  }\n\n  private removeByName(toRemove: string): boolean {\n    for (let i = this.absoluteEntries.length - 1; i >= 0; i--) {\n      if (this.absoluteEntries[i].name && this.absoluteEntries[i].name === toRemove) {\n        this.absoluteEntries.splice(i, 1);\n        delete this.entriesNameMap[toRemove];\n        return true;\n      }\n    }\n    for (let i = this.relativeEntries.length - 1; i >= 0; i--) {\n      if (this.relativeEntries[i].name && this.relativeEntries[i].name === toRemove) {\n        this.relativeEntries.splice(i, 1);\n        delete this.entriesNameMap[toRemove];\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private removeByReference(toRemove: MiddlewareType<Input, Output>): boolean {\n    for (let i = this.absoluteEntries.length - 1; i >= 0; i--) {\n      if (this.absoluteEntries[i].middleware === toRemove) {\n        const { name } = this.absoluteEntries[i];\n        if (name) delete this.entriesNameMap[name];\n        this.absoluteEntries.splice(i, 1);\n        return true;\n      }\n    }\n    for (let i = this.relativeEntries.length - 1; i >= 0; i--) {\n      if (this.relativeEntries[i].middleware === toRemove) {\n        const { name } = this.relativeEntries[i];\n        if (name) delete this.entriesNameMap[name];\n        this.relativeEntries.splice(i, 1);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  removeByTag(toRemove: string): boolean {\n    let removed = false;\n    for (let i = this.absoluteEntries.length - 1; i >= 0; i--) {\n      const { tags, name } = this.absoluteEntries[i];\n      if (tags && tags.indexOf(toRemove) > -1) {\n        this.absoluteEntries.splice(i, 1);\n        if (name) delete this.entriesNameMap[name];\n        removed = true;\n      }\n    }\n    for (let i = this.relativeEntries.length - 1; i >= 0; i--) {\n      const { tags, name } = this.relativeEntries[i];\n      if (tags && tags.indexOf(toRemove) > -1) {\n        this.relativeEntries.splice(i, 1);\n        if (name) delete this.entriesNameMap[name];\n        removed = true;\n      }\n    }\n    return removed;\n  }\n\n  use(plugin: Pluggable<Input, Output>) {\n    plugin.applyToStack(this);\n  }\n\n  /**\n   * Resolve relative middleware entries to multiple double linked lists\n   * depicting the relative location of middleware. Only middleware that have\n   * direct or transitive relation will form a linked list.\n   *\n   * This function normalizes relative middleware into 2 categories of linked\n   * lists. (1) linked list that have absolute-located middleware on one end.\n   * These middleware will be resolved accordingly before or after the absolute-\n   * located middleware. (2) Linked list that have no absolute-located middleware\n   * on any end. They will be resolved to corresponding step with normal priority\n   *\n   * The 2 types of linked list will return as a tuple\n   */\n  private normalizeRelativeEntries(): NormalizingEntryResult<Input, Output> {\n    const absoluteMiddlewareNamesMap = this.absoluteEntries\n      .filter((entry) => entry.name)\n      .reduce((accumulator, entry) => {\n        accumulator[entry.name!] = entry;\n        return accumulator;\n      }, {} as NamedMiddlewareEntriesMap<Input, Output>);\n    const normalized = this.relativeEntries.map(\n      (entry) =>\n        ({\n          ...entry,\n          priority: null,\n          next: undefined,\n          prev: undefined,\n        } as NormalizedRelativeEntry<Input, Output>)\n    );\n    const relativeMiddlewareNamesMap = normalized\n      .filter((entry) => entry.name)\n      .reduce((accumulator, entry) => {\n        accumulator[entry.name!] = entry;\n        return accumulator;\n      }, {} as NamedRelativeEntriesMap<Input, Output>);\n\n    const anchors: RelativeMiddlewareAnchor<Input, Output> = {};\n    for (let i = 0; i < this.relativeEntries.length; i++) {\n      const { prev, next } = this.relativeEntries[i];\n      const resolvedCurr = normalized[i];\n      //either prev or next is set\n      if (prev) {\n        if (absoluteMiddlewareNamesMap[prev] && absoluteMiddlewareNamesMap[prev].step === resolvedCurr.step) {\n          if (!anchors[prev]) anchors[prev] = {};\n          resolvedCurr.next = anchors[prev].next;\n          if (anchors[prev].next) anchors[prev].next!.prev = resolvedCurr;\n          anchors[prev].next = resolvedCurr;\n        } else if (relativeMiddlewareNamesMap[prev] && relativeMiddlewareNamesMap[prev].step === resolvedCurr.step) {\n          const resolvedPrev = relativeMiddlewareNamesMap[prev];\n          if (resolvedPrev.next === resolvedCurr) continue;\n          resolvedCurr.next = resolvedPrev.next;\n          resolvedPrev.next = resolvedCurr;\n          if (resolvedCurr.next) resolvedCurr.next.prev = resolvedCurr;\n          resolvedCurr.prev = resolvedPrev;\n        }\n      } else if (next) {\n        if (absoluteMiddlewareNamesMap[next] && absoluteMiddlewareNamesMap[next].step === resolvedCurr.step) {\n          if (!anchors[next]) anchors[next] = {};\n          resolvedCurr.prev = anchors[next].prev;\n          if (anchors[next].prev) anchors[next].prev!.next = resolvedCurr;\n          anchors[next].prev = resolvedCurr;\n        } else if (relativeMiddlewareNamesMap[next] && relativeMiddlewareNamesMap[next].step === resolvedCurr.step) {\n          const resolvedNext = relativeMiddlewareNamesMap[next];\n          if (resolvedNext.prev === resolvedCurr) continue;\n          resolvedCurr.prev = resolvedNext.prev;\n          resolvedNext.prev = resolvedCurr;\n          if (resolvedCurr.prev) resolvedCurr.prev.next = resolvedCurr;\n          resolvedCurr.next = resolvedNext;\n        }\n      }\n    }\n    // get the head of the relative middleware linked list that have\n    // no transitive relation to absolute middleware.\n    const orphanedRelativeEntries: Array<NormalizedRelativeEntry<Input, Output>> = [];\n    const visited: WeakSet<NormalizedRelativeEntry<Input, Output>> = new WeakSet();\n    for (const anchorName of Object.keys(anchors)) {\n      let { prev, next } = anchors[anchorName];\n      while (prev) {\n        visited.add(prev);\n        prev = prev.prev;\n      }\n      while (next) {\n        visited.add(next);\n        next = next.next;\n      }\n    }\n    for (let i = 0; i < normalized.length; i++) {\n      let entry: NormalizedRelativeEntry<Input, Output> | undefined = normalized[i];\n      if (visited.has(entry)) continue;\n      if (!entry.prev) orphanedRelativeEntries.push(entry);\n      while (entry && !visited.has(entry)) {\n        visited.add(entry);\n        entry = entry.next;\n      }\n    }\n    return [orphanedRelativeEntries, anchors];\n  }\n\n  /**\n   * Get a final list of middleware in the order of being executed in the resolved handler.\n   * If relative entries list is not empty, those entries will be added to final middleware\n   * list with rules below:\n   * 1. if `toMiddleware` exists in the specific `step`, the middleware will be inserted before\n   *     or after the specified `toMiddleware`\n   * 2. if `toMiddleware` doesn't exist in the specific `step`, the middleware will be appended\n   *     to specific `step` with priority of `normal`\n   */\n  private getMiddlewareList(): Array<MiddlewareType<Input, Output>> {\n    const middlewareList: Array<MiddlewareType<Input, Output>> = [];\n    const [orphanedRelativeEntries, anchors] = this.normalizeRelativeEntries();\n    let entryList = [...this.absoluteEntries, ...orphanedRelativeEntries];\n    entryList = this.sort(entryList);\n    for (const entry of entryList) {\n      const defaultAnchorValue = { prev: undefined, next: undefined };\n      const { prev, next } = entry.name ? anchors[entry.name] || defaultAnchorValue : defaultAnchorValue;\n      let relativeEntry = prev;\n      //reverse relative entry linked list and add to ordered handler list\n      while (relativeEntry?.prev) {\n        relativeEntry = relativeEntry.prev;\n      }\n      while (relativeEntry) {\n        middlewareList.push(relativeEntry.middleware);\n        relativeEntry = relativeEntry.next;\n      }\n      middlewareList.push(entry.middleware);\n      let orphanedEntry = entry as any;\n      while ((orphanedEntry as any).next) {\n        middlewareList.push((orphanedEntry as any).next.middleware);\n        orphanedEntry = (orphanedEntry as any).next;\n      }\n      relativeEntry = next;\n      while (relativeEntry) {\n        middlewareList.push(relativeEntry.middleware);\n        relativeEntry = relativeEntry.next;\n      }\n    }\n    return middlewareList.reverse();\n  }\n\n  resolve<InputType extends Input, OutputType extends Output>(\n    handler: DeserializeHandler<InputType, OutputType>,\n    context: HandlerExecutionContext\n  ): Handler<InputType, OutputType> {\n    for (const middleware of this.getMiddlewareList()) {\n      handler = middleware(handler as Handler<Input, OutputType>, context) as any;\n    }\n\n    return handler as Handler<InputType, OutputType>;\n  }\n}\n\nconst stepWeights: { [key in Step]: number } = {\n  initialize: 5,\n  serialize: 4,\n  build: 3,\n  finalizeRequest: 2,\n  deserialize: 1,\n};\n\nconst priorityWeights: { [key in Priority]: number } = {\n  high: 3,\n  normal: 2,\n  low: 1,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}