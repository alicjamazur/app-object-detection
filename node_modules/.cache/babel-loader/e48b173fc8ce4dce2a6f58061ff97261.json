{"ast":null,"code":"var _jsxFileName = \"/Users/alicjamazur/Desktop/work-in-progress/app-yolov2-client /src/containers/NewInference.js\";\nimport React, { useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport config from \"../config\";\nimport \"./NewInference.css\";\nimport { API } from \"aws-amplify\";\nimport { onError } from \"../libs/errorLib\";\nimport { Link } from \"react-router-dom\";\nimport { Jumbotron, Row, Col } from 'react-bootstrap';\nimport { Button } from 'react-bootstrap';\nexport default function NewInference() {\n  const file = useRef(null);\n  const [outputImage, setOutputImage] = useState(null);\n  const [inputImage, setInputImage] = useState(null);\n  const history = useHistory();\n  const [isLoading, setIsLoading] = useState(false);\n  const [inferenceMade, setInferenceMade] = useState(false);\n  const [fileLoaded, setFileLoaded] = useState(false);\n  const [coldStart, setColdStart] = useState(false);\n  const [inferenceStatus, setInferenceStatus] = useState(\"\"); // Handle image submission\n\n  function handleFileChange(event) {\n    file.current = event.target.files[0]; // Convert image to base64\n\n    var reader = new FileReader();\n    reader.readAsDataURL(file.current);\n\n    reader.onloadend = function () {\n      const base64string = reader.result; // console.log(\"Base64 String - \", base64string);\n\n      let imageBase64 = base64string.substr(base64string.indexOf(',') + 1);\n      setInputImage(imageBase64); // console.log('Base64 String without Tags- ', imageBase64);\n    };\n  }\n\n  function handleColdStart() {\n    while (outputImage == null) {\n      setInferenceStatus(\"Warming up Lambda...\");\n      var response = inference(inputImage);\n    }\n\n    return response;\n  } // Make inference \n\n\n  async function handleSubmit(event) {\n    event.preventDefault(); //event.persist();\n    // Validate input file\n\n    if (file.current && file.current.type != \"image/png\" && file.current.type != \"image/jpeg\") {\n      alert(` Pick a JPG or PNG file `);\n      return;\n    }\n\n    ;\n    setIsLoading(true);\n    setIsLoading(true);\n\n    try {\n      setInferenceStatus(\"Initializing...\");\n      var response = await inference(inputImage); // Handle Lambda cold start\n\n      var response = setTimeout(handleColdStart, 20000);\n      console.log(\"Handling cold start\");\n      setOutputImage(response);\n      setInferenceMade(true);\n      setIsLoading(false);\n      setInferenceStatus(\"\");\n    } catch (e) {\n      const coldStart = onError(e);\n      setColdStart(coldStart); // if (coldStart) {\n      //   setInferenceStatus(\"Warming up Lambda...\")\n      //   handleSubmit(event);\n      // }\n    }\n  } // API call with Amplify\n\n\n  function inference(inputImage) {\n    return API.post(\"inference\", \"\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: inputImage\n    });\n  } // Render webpage\n\n\n  return /*#__PURE__*/React.createElement(\"body\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, inferenceMade ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Jumbotron, {\n    className: \"PostInference\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 5,\n    md: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }, \"Liked it?\"), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }, \"If you are curious, learn more about the architecture of this app.\")), /*#__PURE__*/React.createElement(Col, {\n    xs: 5,\n    md: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: \"sm\",\n    variant: \"primary\",\n    href: \"/architecture\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 19\n    }\n  }, \"Learn more\")))))) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"NewInference\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    controlId: \"imageFile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ControlLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, \"Choose an image to process (JPG or PNG)\"), /*#__PURE__*/React.createElement(FormControl, {\n    onChange: handleFileChange,\n    type: \"file\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, inferenceStatus), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }, coldStart ? \"Warming up AWS Lambda..\" : \"\", \" \"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LoaderButton, {\n    type: \"submit\",\n    bsSize: \"medium\",\n    bsStyle: \"danger\",\n    isLoading: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, \"Detect objects\"))), /*#__PURE__*/React.createElement(\"img\", {\n    src: outputImage == null ? \"\" : `data:image/png;base64,${outputImage}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/alicjamazur/Desktop/work-in-progress/app-yolov2-client /src/containers/NewInference.js"],"names":["React","useRef","useState","useHistory","FormGroup","FormControl","ControlLabel","LoaderButton","config","API","onError","Link","Jumbotron","Row","Col","Button","NewInference","file","outputImage","setOutputImage","inputImage","setInputImage","history","isLoading","setIsLoading","inferenceMade","setInferenceMade","fileLoaded","setFileLoaded","coldStart","setColdStart","inferenceStatus","setInferenceStatus","handleFileChange","event","current","target","files","reader","FileReader","readAsDataURL","onloadend","base64string","result","imageBase64","substr","indexOf","handleColdStart","response","inference","handleSubmit","preventDefault","type","alert","setTimeout","console","log","e","post","headers","body"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport config from \"../config\";\nimport \"./NewInference.css\";\nimport { API } from \"aws-amplify\";\nimport { onError } from \"../libs/errorLib\";\nimport { Link } from \"react-router-dom\";\nimport {Jumbotron, Row, Col} from 'react-bootstrap'\nimport {Button} from 'react-bootstrap'\n\n\n\nexport default function NewInference() {\n  const file = useRef(null);\n  const [outputImage, setOutputImage] = useState(null);\n  const [inputImage, setInputImage] = useState(null);\n  const history = useHistory();\n  const [isLoading, setIsLoading] = useState(false);\n  const [inferenceMade, setInferenceMade] = useState(false);\n  const [fileLoaded, setFileLoaded] = useState(false);\n  const [coldStart, setColdStart] = useState(false);\n  const [inferenceStatus, setInferenceStatus] = useState(\"\")\n  \n  // Handle image submission\n  function handleFileChange(event) {\n    file.current = event.target.files[0];\n\n    // Convert image to base64\n    var reader = new FileReader();\n    reader.readAsDataURL(file.current);\n    reader.onloadend = function() {\n    const base64string = reader.result;\n    // console.log(\"Base64 String - \", base64string);\n    let imageBase64 = base64string.substr(base64string.indexOf(',') + 1);\n    setInputImage(imageBase64);\n    // console.log('Base64 String without Tags- ', imageBase64);\n    }\n  }\n\n  function handleColdStart() {\n    while (outputImage == null) {\n      setInferenceStatus(\"Warming up Lambda...\");\n      var response = inference(inputImage);\n    }\n    return response;\n  }\n\n  // Make inference \n  async function handleSubmit(event) {\n    event.preventDefault();\n    //event.persist();\n    \n    // Validate input file\n    if (file.current && (file.current.type != \"image/png\" && file.current.type != \"image/jpeg\")) {\n      alert(\n      ` Pick a JPG or PNG file `)\n      return;\n      };\n    \n    setIsLoading(true);\n\n\n    setIsLoading(true);\n\n    try {\n      setInferenceStatus(\"Initializing...\");\n      var response = await inference(inputImage);\n\n      // Handle Lambda cold start\n      var response = setTimeout(handleColdStart, 20000);\n      console.log(\"Handling cold start\")\n      \n      setOutputImage(response);\n      setInferenceMade(true);\n      setIsLoading(false);\n      setInferenceStatus(\"\");\n\n    } catch (e) {\n      const coldStart = onError(e);\n      setColdStart(coldStart);\n\n      // if (coldStart) {\n      //   setInferenceStatus(\"Warming up Lambda...\")\n      //   handleSubmit(event);\n      // }\n    }\n\n  }\n\n  // API call with Amplify\n  function inference(inputImage) {\n    return API.post(\"inference\", \"\", {\n      headers: {\n        \"Content-Type\": \"application/json\", \n        \"Accept\": \"application/json\"\n      },\n      body: inputImage\n    });\n  }\n\n\n  // Render webpage\n  return (\n    <body>\n      <div>\n        {inferenceMade ? (\n          <>\n            <Jumbotron className=\"PostInference\">\n              <Row> \n                <Col xs={5} md={5}>\n                <h4>Liked it?</h4>\n                <h5>If you are curious, learn more about the architecture of this app.</h5>\n              </Col>\n              <Col xs={5} md={5}>\n                <p>\n                  <Button size=\"sm\" variant=\"primary\" href=\"/architecture\">Learn more</Button>\n                </p>\n              </Col>\n              </Row>\n            </Jumbotron>\n          </>\n          ) : null }\n      </div>\n      <div className=\"NewInference\">\n        <form>\n          <FormGroup controlId=\"imageFile\">\n            <ControlLabel>Choose an image to process (JPG or PNG)</ControlLabel>\n            <FormControl onChange={handleFileChange} type=\"file\" />\n          </FormGroup>\n          <p>{inferenceStatus}</p>\n          <p>{ coldStart ? \"Warming up AWS Lambda..\" : \"\" } </p>\n        </form>\n      </div>\n      <div className=\"Button\">\n        <form onSubmit={handleSubmit}>\n        <LoaderButton\n            type=\"submit\"\n            bsSize=\"medium\"\n            bsStyle=\"danger\"\n            isLoading={isLoading}\n           \n          >\n          Detect objects\n          </LoaderButton>\n        </form>\n      </div>\n      <img src={outputImage == null ? \"\" : `data:image/png;base64,${outputImage}`} />\n    </body>\n  );\n  }\n"]},"metadata":{},"sourceType":"module"}