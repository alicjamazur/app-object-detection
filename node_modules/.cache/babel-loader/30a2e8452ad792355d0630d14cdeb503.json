{"ast":null,"code":"var _jsxFileName = \"/Users/alicjamazur/Desktop/work-in-progress/app-yolov2-client /src/containers/Architecture.js\";\nimport React, { useRef, useState } from \"react\";\nimport { Button, ButtonToolbar } from \"react-bootstrap\";\nimport { Tooltip, OverlayTrigger, Overlay } from \"react-bootstrap\";\nimport { Popover } from \"react-bootstrap\";\nimport ImageMapper from 'react-image-mapper';\nimport \"./Architecture.css\";\nexport default function Architecture() {\n  const [popover, setPopover] = useState(\"blank\");\n  const URL = \"https://demo-object-detection-app.s3.amazonaws.com/architecture3.png\";\n  const MAP = {\n    name: \"my-map\",\n    areas: [{\n      name: \"1\",\n      shape: \"circle\",\n      coords: [137, 58, 10],\n      strokeColor: \"green\"\n    }, {\n      name: \"2\",\n      shape: \"circle\",\n      coords: [247, 198.5, 10],\n      strokeColor: \"green\"\n    }, {\n      name: \"3\",\n      shape: \"circle\",\n      coords: [485, 198, 10],\n      strokeColor: \"green\"\n    }, {\n      name: \"4\",\n      shape: \"circle\",\n      coords: [621, 330.5, 10],\n      strokeColor: \"green\"\n    }, {\n      name: \"5\",\n      shape: \"circle\",\n      coords: [484, 259, 10],\n      strokeColor: \"green\"\n    }, {\n      name: \"6\",\n      shape: \"circle\",\n      coords: [250, 259, 10],\n      strokeColor: \"green\"\n    }]\n  };\n\n  function choosePopover(pop_num) {\n    const popoverContent = {\n      \"blank\": \"\",\n      \"1\": \"The browser downloads and stores the static content that forms this website. \\\n            The user interface is written in React.js, while runtime environment uses Node.js platform. \\\n            Open-source AWS framework Amplify is used to make API calls.\",\n      \"2\": \"Within a click of a button the uploaded image is base64 encoded for safe transport through the web \\\n            and AWS Amplify makes a REST API call to API Gateway, set up as Lambda Proxy integration.\",\n      \"3\": \"API Gateway invokes Lambda function that hosts Python code used to make machine learning inference.\",\n      \"4\": \"The inference code was written by me during the “Deep Learning Specialization” course on coursera.org, inspired by this project of Allan Zelener. \\\n            To make predictions I use trained machine learning model YOLOv2 available here, authored by Joseph Redmon. \\\n            YOLOv2 detects thousands of potential objects on the input image by specifying bounding box coordinates relative to image dimensions. \\\n            Thanks to non-max-suppression technique, Lambda outputs only the most probable predictions.\\\n            Due to bulky both model weights and library dependencies, Amazon EFS is used to extend Lambda storage space.\",\n      \"5\": \"Lambda returns the input image with drawn bounding boxes and marked labels to indicate predicted objects. For safe web transport to the user, the image is again base64 encoded.\",\n      \"6\": \"API Gateway passes the response generated by Lambda to the front-end.\"\n    };\n    const popoverTitle = {\n      \"0\": \"\",\n      \"1\": \"Static website hosting on S3\",\n      \"2\": \"API Gateway call via Amplify\",\n      \"3\": \"API Lambda Proxy integration\",\n      \"4\": \"Lambda intergrated with EFS for machine learning inference \",\n      \"5\": \"Lambda integration response\",\n      \"6\": \"API Gateway response via Amplify\"\n    };\n    return /*#__PURE__*/React.createElement(Popover, {\n      id: pop_num,\n      title: popoverTitle[pop_num],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, popoverContent[pop_num]);\n  }\n\n  const header = \"The app is built on top of serverless-stack bundle, a part of the Serverless Stack open-source project developed by Anomaly Detection. \\\n                 They created a step-by-step guide to create a full-stack serverless application hosted on AWS. You can check it out here.\";\n\n  function handleClick(event) {\n    const pop_num = event.name.toString();\n    setPopover(pop_num);\n    choosePopover(\"1\");\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"body\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, \" \", popover, \" \", header), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ImageMapper, {\n    src: URL,\n    map: MAP,\n    width: 794,\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  })));\n} // <OverlayTrigger  trigger=\"click\" placement=\"right\" onClick={handleClick} overlay={`choosePopover(${popover})`}>\n// Popoover on the left upper corner\n// export default function Architecture() {\n//   const [show, setShow] = useState(false);\n//   const [target, setTarget] = useState(null);\n//   const ref = useRef(null);\n//   function handleClick(event) {\n//     setShow(!show);\n//     setTarget(event.target);\n//     console.log(\"Ref: \", ref.current);\n//     console.log(\"Target: \", event.target);\n//   }\n//   return (\n//     <body>\n//     <div  >\n//       <img class=\"image\" src={require(\"./architecture3.png\")}\n//             alt=\"App architecture\" \n//             height=\"562\"\n//             weight=\"644\"\n//             usemap=\"#image-map\">\n//       </img>\n// <map  name=\"image-map\">\n// <area ref={ref} target=\"_self\" alt=\"1\" onClick={handleClick}  href=\"#\" coords=\"133,58,20\" shape=\"circle\" />\n// <area ref={ref} target=\"_self\" alt=\"2\" title=\"2\" onClick={handleClick} href=\"#\" coords=\"247,198.5,20\" shape=\"circle\" />\n// </map>  \n//     </div>\n//     <div>\n//       <Overlay\n//         show={show}\n//         target={target}\n//         placement=\"bottom\"\n//         container={ref.current}\n//         containerPadding={0}\n//       >\n//         <Popover id=\"popover1\" title=\"Popover bottom\" >\n//           <strong>Holy guacamole!</strong>\n//         </Popover>\n//       </Overlay>\n//     </div>\n//     </body>\n//   );\n// }\n// This works\n// export default function Architecture() {\n//   const popoverLeft = (\n//     <Popover id=\"popover-positioned-left\" title=\"Popover left\">\n//       <strong>Holy guacamole!</strong> Check this info.\n//     </Popover>\n//   );\n//   return (\n//     <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popoverLeft}>\n//       <Button>Holy guacamole!</Button>\n//     </OverlayTrigger>\n//   );\n// }\n// export default function HowItWorks() {  \n// export default function Architecture() {\n//   const [show, setShow] = useState(false);\n//   const [target, setTarget] = useState(null);\n//   const ref = useRef(null);\n//   function handleClick(event) {\n//     setShow(!show);\n//     setTarget(event.target);\n//     // console.log(event.target);\n//     // alert(\"Hello\");\n//   };\n//   return (\n//     <div ref={ref}>\n//       <Button onClick={handleClick}>Holy guacamole!</Button>\n//       <Overlay\n//         show={show}\n//         target={target}\n//         placement=\"bottom\"\n//         container={ref.current}\n//         containerPadding={20}\n//       >\n//       </Overlay> */}\n//      </div>\n//   );\n// }\n// <h5> Click on a number to learn more on the workflow. </h5>\n//       <img class=\"image\" src={require(\"./architecture3.png\")}\n//           alt=\"App architecture\" \n//           height=\"562\"\n//           weight=\"644\"\n//           usemap=\"#image-map\">\n//       </img>\n// <map name=\"image-map\">\n//       <area target=\"_self\"  id=\"popover1\" alt=\"1\" title=\"1\" onClick={handleClick} href=\"#\" coords=\"133,58,20\" shape=\"circle\" />\n//       </map>\n// <area target=\"_blank\" alt=\"2\" title=\"2\" href=\"#\" coords=\"247,198.5,20\" shape=\"circle\" />\n//       <area target=\"_blank\" alt=\"3\" title=\"3\" href=\"3\" coords=\"485,198.5,20\" shape=\"circle\" />\n//       <area target=\"_blank\" alt=\"4\" title=\"4\" href=\"4\" coords=\"621,330.5,20\" shape=\"circle\" />\n//       <area target=\"_blank\" alt=\"5\" title=\"5\" href=\"5\" coords=\"484,259,20\" shape=\"circle\" />\n//       <area target=\"_blank\" alt=\"6\" title=\"6\" href=\"6\" coords=\"250,259,20\" shape=\"circle\" />","map":{"version":3,"sources":["/Users/alicjamazur/Desktop/work-in-progress/app-yolov2-client /src/containers/Architecture.js"],"names":["React","useRef","useState","Button","ButtonToolbar","Tooltip","OverlayTrigger","Overlay","Popover","ImageMapper","Architecture","popover","setPopover","URL","MAP","name","areas","shape","coords","strokeColor","choosePopover","pop_num","popoverContent","popoverTitle","header","handleClick","event","toString"],"mappings":"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":["import React, { useRef, useState } from \"react\";\nimport { Button, ButtonToolbar } from \"react-bootstrap\";\nimport { Tooltip, OverlayTrigger, Overlay } from \"react-bootstrap\";\nimport { Popover } from \"react-bootstrap\";\nimport ImageMapper from 'react-image-mapper';\n\nimport \"./Architecture.css\";\n\nexport default function Architecture() {\n\n  const [popover, setPopover] = useState(\"blank\");\n  const URL = \"https://demo-object-detection-app.s3.amazonaws.com/architecture3.png\";\n  \n  const MAP = {\n    name: \"my-map\",\n    areas: [\n      { name: \"1\", shape: \"circle\", coords: [137,58,10], strokeColor: \"green\" },\n      { name: \"2\", shape: \"circle\", coords: [247,198.5,10], strokeColor: \"green\"  },\n      { name: \"3\", shape: \"circle\", coords: [485,198,10], strokeColor: \"green\"  },\n      { name: \"4\", shape: \"circle\", coords: [621,330.5,10], strokeColor: \"green\"  },\n      { name: \"5\", shape: \"circle\", coords: [484,259,10], strokeColor: \"green\" },\n      { name: \"6\", shape: \"circle\", coords: [250,259,10], strokeColor: \"green\" },\n    ]\n  };\n\n  function choosePopover(pop_num) {\n\n    const popoverContent = {\n      \"blank\": \"\",\n      \"1\": \"The browser downloads and stores the static content that forms this website. \\\n            The user interface is written in React.js, while runtime environment uses Node.js platform. \\\n            Open-source AWS framework Amplify is used to make API calls.\",\n            \n      \"2\": \"Within a click of a button the uploaded image is base64 encoded for safe transport through the web \\\n            and AWS Amplify makes a REST API call to API Gateway, set up as Lambda Proxy integration.\",\n\n      \"3\": \"API Gateway invokes Lambda function that hosts Python code used to make machine learning inference.\",\n      \"4\": \"The inference code was written by me during the “Deep Learning Specialization” course on coursera.org, inspired by this project of Allan Zelener. \\\n            To make predictions I use trained machine learning model YOLOv2 available here, authored by Joseph Redmon. \\\n            YOLOv2 detects thousands of potential objects on the input image by specifying bounding box coordinates relative to image dimensions. \\\n            Thanks to non-max-suppression technique, Lambda outputs only the most probable predictions.\\\n            Due to bulky both model weights and library dependencies, Amazon EFS is used to extend Lambda storage space.\",\n\n      \"5\": \"Lambda returns the input image with drawn bounding boxes and marked labels to indicate predicted objects. For safe web transport to the user, the image is again base64 encoded.\",\n\n      \"6\": \"API Gateway passes the response generated by Lambda to the front-end.\"\n    };\n    \n    const popoverTitle = {\n      \"0\": \"\",\n      \"1\": \"Static website hosting on S3\",\n      \"2\": \"API Gateway call via Amplify\",\n      \"3\": \"API Lambda Proxy integration\",\n      \"4\": \"Lambda intergrated with EFS for machine learning inference \",\n      \"5\": \"Lambda integration response\",\n      \"6\": \"API Gateway response via Amplify\"\n    };\n\n\n    return (\n      <Popover id={pop_num} title={popoverTitle[pop_num]} >\n        {popoverContent[pop_num]}\n      </Popover>\n    );\n  \n  }\n  const header = \"The app is built on top of serverless-stack bundle, a part of the Serverless Stack open-source project developed by Anomaly Detection. \\\n                 They created a step-by-step guide to create a full-stack serverless application hosted on AWS. You can check it out here.\"\n\n\n  function handleClick(event) {\n    const pop_num = event.name.toString();\n    setPopover(pop_num);\n    choosePopover(\"1\");\n  };\n\n  return (\n    <body>\n      <p> {popover} {header }</p>\n      <div className=\"image\">\n        \n          <ImageMapper src={URL} map={MAP} width={794} onClick={handleClick}/>\n\n      </div>\n    </body>\n  );\n}\n\n// <OverlayTrigger  trigger=\"click\" placement=\"right\" onClick={handleClick} overlay={`choosePopover(${popover})`}>\n// Popoover on the left upper corner\n// export default function Architecture() {\n\n//   const [show, setShow] = useState(false);\n//   const [target, setTarget] = useState(null);\n//   const ref = useRef(null);\n\n//   function handleClick(event) {\n//     setShow(!show);\n//     setTarget(event.target);\n//     console.log(\"Ref: \", ref.current);\n//     console.log(\"Target: \", event.target);\n\n//   }\n\n\n//   return (\n//     <body>\n//     <div  >\n//       <img class=\"image\" src={require(\"./architecture3.png\")}\n//             alt=\"App architecture\" \n//             height=\"562\"\n//             weight=\"644\"\n//             usemap=\"#image-map\">\n//       </img>\n      // <map  name=\"image-map\">\n      // <area ref={ref} target=\"_self\" alt=\"1\" onClick={handleClick}  href=\"#\" coords=\"133,58,20\" shape=\"circle\" />\n      // <area ref={ref} target=\"_self\" alt=\"2\" title=\"2\" onClick={handleClick} href=\"#\" coords=\"247,198.5,20\" shape=\"circle\" />\n      // </map>  \n\n//     </div>\n//     <div>\n      \n//       <Overlay\n//         show={show}\n//         target={target}\n//         placement=\"bottom\"\n//         container={ref.current}\n//         containerPadding={0}\n//       >\n//         <Popover id=\"popover1\" title=\"Popover bottom\" >\n//           <strong>Holy guacamole!</strong>\n//         </Popover>\n//       </Overlay>\n//     </div>\n//     </body>\n//   );\n// }\n\n\n// This works\n// export default function Architecture() {\n \n//   const popoverLeft = (\n//     <Popover id=\"popover-positioned-left\" title=\"Popover left\">\n//       <strong>Holy guacamole!</strong> Check this info.\n//     </Popover>\n//   );\n  \n//   return (\n//     <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popoverLeft}>\n//       <Button>Holy guacamole!</Button>\n//     </OverlayTrigger>\n\n//   );\n// }\n\n// export default function HowItWorks() {  \n\n// export default function Architecture() {\n//   const [show, setShow] = useState(false);\n//   const [target, setTarget] = useState(null);\n//   const ref = useRef(null);\n\n//   function handleClick(event) {\n  \n//     setShow(!show);\n//     setTarget(event.target);\n//     // console.log(event.target);\n//     // alert(\"Hello\");\n//   };\n\n//   return (\n//     <div ref={ref}>\n//       <Button onClick={handleClick}>Holy guacamole!</Button>\n\n//       <Overlay\n//         show={show}\n//         target={target}\n//         placement=\"bottom\"\n//         container={ref.current}\n//         containerPadding={20}\n        \n//       >\n  \n//       </Overlay> */}\n      \n//      </div>\n//   );\n// }\n\n\n\n\n  // <h5> Click on a number to learn more on the workflow. </h5>\n  //       <img class=\"image\" src={require(\"./architecture3.png\")}\n  //           alt=\"App architecture\" \n  //           height=\"562\"\n  //           weight=\"644\"\n  //           usemap=\"#image-map\">\n  //       </img>\n  // <map name=\"image-map\">\n  //       <area target=\"_self\"  id=\"popover1\" alt=\"1\" title=\"1\" onClick={handleClick} href=\"#\" coords=\"133,58,20\" shape=\"circle\" />\n  //       </map>\n\n  // <area target=\"_blank\" alt=\"2\" title=\"2\" href=\"#\" coords=\"247,198.5,20\" shape=\"circle\" />\n  //       <area target=\"_blank\" alt=\"3\" title=\"3\" href=\"3\" coords=\"485,198.5,20\" shape=\"circle\" />\n  //       <area target=\"_blank\" alt=\"4\" title=\"4\" href=\"4\" coords=\"621,330.5,20\" shape=\"circle\" />\n  //       <area target=\"_blank\" alt=\"5\" title=\"5\" href=\"5\" coords=\"484,259,20\" shape=\"circle\" />\n  //       <area target=\"_blank\" alt=\"6\" title=\"6\" href=\"6\" coords=\"250,259,20\" shape=\"circle\" />\n\n"]},"metadata":{},"sourceType":"module"}