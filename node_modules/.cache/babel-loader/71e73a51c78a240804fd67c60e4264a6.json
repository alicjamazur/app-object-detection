{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultDelayDecider = void 0;\n\nvar constants_1 = require(\"./constants\");\n/**\n * Calculate a capped, fully-jittered exponential backoff time.\n */\n\n\nexports.defaultDelayDecider = function (delayBase, attempts) {\n  return Math.floor(Math.min(constants_1.MAXIMUM_RETRY_DELAY, Math.random() * Math.pow(2, attempts) * delayBase));\n};","map":{"version":3,"sources":["../../src/delayDecider.ts"],"names":[],"mappings":";;;;;;;AAAA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAEA;;;;;AAGa,OAAA,CAAA,mBAAA,GAAsB,UAAC,SAAD,EAAoB,QAApB,EAAoC;AACrE,SAAA,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,GAAL,CAAS,WAAA,CAAA,mBAAT,EAA8B,IAAI,CAAC,MAAL,KAAgB,IAAA,CAAA,GAAA,CAAA,CAAA,EAAK,QAAL,CAAhB,GAAgC,SAA9D,CAAX,CAAA;AAAoF,CADzE","sourcesContent":["import { MAXIMUM_RETRY_DELAY } from \"./constants\";\n\n/**\n * Calculate a capped, fully-jittered exponential backoff time.\n */\nexport const defaultDelayDecider = (delayBase: number, attempts: number) =>\n  Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}