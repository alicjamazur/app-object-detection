{"version":3,"sources":["containers/Home.js","components/LoaderButton.js","config.js","libs/errorLib.js","containers/NewInference.js","containers/Result.js","containers/Architecture.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","src","alt","to","LoaderButton","isLoading","disabled","props","Button","Glyphicon","glyph","children","REGION","URL","onError","error","message","toString","errorCode","split","Error","alert","NewInference","file","useRef","useState","outputImage","setOutputImage","inputImage","setInputImage","setIsLoading","inferenceMade","setInferenceMade","inferenceStatus","setInferenceStatus","handleSubmit","event","a","preventDefault","current","type","console","log","inference","response","learnMore","coldStart","setTimeout","API","post","headers","body","Jumbotron","Row","Col","xs","md","size","variant","href","FormGroup","controlId","ControlLabel","FormControl","onChange","target","files","reader","FileReader","readAsDataURL","onloadend","base64string","result","imageBase64","substr","indexOf","onSubmit","bsSize","bsStyle","class","Result","Architecture","panelContent","panelTitle","title","setTitle","content","setContent","Grid","Panel","Heading","Title","componentClass","Body","map","name","areas","shape","coords","strokeColor","width","onClick","num","Routes","exact","path","App","Navbar","fluid","collapseOnSelect","Header","Brand","height","Toggle","Collapse","Nav","pullRight","NavItem","Boolean","window","location","hostname","match","Amplify","configure","endpoints","endpoint","config","region","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.ba4731f1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Home.css\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Home() {\n  return (\n    <div className=\"Home\">\n      <div className=\"lander\">\n      <img \n          src=\"logo.jpg\" \n          alt=\"DEMO object detection app\"\n          />\n        <p>Detect objects on your images using computer vision</p>\n        <Link to=\"/inference\" className=\"btn btn-danger btn-lg\">\n          Get started\n        </Link>\n      </div>\n\n    </div>\n  );\n}","import React from \"react\";\nimport { Button, Glyphicon } from \"react-bootstrap\";\nimport \"./LoaderButton.css\";\n\nexport default function LoaderButton({\n  isLoading,\n  className = \"\",\n  disabled = false,\n  ...props\n}) {\n  return (\n    <Button\n      className={`LoaderButton ${className}`}\n      disabled={disabled || isLoading}\n      {...props}\n    >\n      {isLoading && <Glyphicon glyph=\"refresh\" className=\"spinning\" />}\n      {props.children}\n    </Button>\n  );\n}","export default {\n    IMAGE_FORMAT: \".png\",\n\n    apiGateway: {\n      REGION: \"REPLACE_REGION\",\n      URL: \"https://REPLACE_APIID.execute-api.REPLACE_REGION.amazonaws.com/Production/inference\"\n    },\n    \n  };","export function onError(error) {\n    let message = error.toString();\n    let errorCode = message.split(\"status code \")[1]\n\n    // API Gateway timeout errors\n    if (errorCode == \"504\" || errorCode == \"500\") {\n      let coldStart = true;\n      return coldStart;\n    }\n\n    // Auth errors\n    else if (!(error instanceof Error) && error.message) {\n      message = error.message;\n    }\n    alert(message);\n    return false;\n  }","import React, { useRef, useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport config from \"../config\";\nimport \"./NewInference.css\";\nimport { API } from \"aws-amplify\";\nimport { onError } from \"../libs/errorLib\";\nimport { Link } from \"react-router-dom\";\nimport {Jumbotron, Row, Col} from 'react-bootstrap'\nimport {Button} from 'react-bootstrap'\n\n\n\nexport default function NewInference() {\n  const file = useRef(null);\n  const [outputImage, setOutputImage] = useState(\"\");\n  const [inputImage, setInputImage] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [inferenceMade, setInferenceMade] = useState(false);\n  const [inferenceStatus, setInferenceStatus] = useState(\"\");\n\n\n  // Handle image submission\n  function handleFileChange(event) {\n    file.current = event.target.files[0];\n\n    // Convert image to base64\n    var reader = new FileReader();\n    reader.readAsDataURL(file.current);\n    reader.onloadend = function() {\n    const base64string = reader.result;\n    let imageBase64 = base64string.substr(base64string.indexOf(',') + 1);\n    setInputImage(imageBase64);\n    }\n  }\n\n  // Make inference \n  async function handleSubmit(event) {\n    event.preventDefault();\n\n    // Validate input file\n    if (file.current && (file.current.type != \"image/png\" && file.current.type != \"image/jpeg\")) {\n      alert(\n      ` Pick a JPG or PNG file `)\n      return;\n      };\n    \n    setIsLoading(true);\n    setInferenceStatus(\"Processing...\")\n\n    try {\n      console.log(\"inference\");\n      const response = await inference(inputImage);\n      setOutputImage(response);\n      learnMore();\n\n    } catch (e) {\n      const coldStart = onError(e);\n      setInferenceMade(false);\n\n      if (coldStart) {\n        setInferenceStatus(\"Just few more seconds, Lambda is warming up...\")\n        return handleSubmit(event);\n      }\n    }\n    setInferenceStatus(\"\");\n    setIsLoading(false);\n\n  }\n\n  function learnMore() {\n    setTimeout(() => {\n      setInferenceMade(true)\n    }, 5000);\n  }\n  \n\n  // API call with Amplify\n  function inference(inputImage) {\n    return API.post(\"inference\", \"\", {\n      headers: {\n        \"Content-Type\": \"application/json\", \n        \"Accept\": \"application/json\"\n      },\n      body: inputImage\n    });\n  }\n\n\n  // Render webpage\n  return (\n    <body>\n      <div>\n        {inferenceMade ? (\n          <>\n            <Jumbotron className=\"PostInference\">\n              <Row> \n                <Col xs={5} md={5}>\n                <h4>Liked it?</h4>\n                <h5>If you are curious, learn more about the architecture of this app.</h5>\n              </Col>\n              <Col xs={5} md={5}>\n                <p>\n                  <Button size=\"sm\" variant=\"primary\" href=\"/architecture\">Learn more</Button>\n                </p>\n              </Col>\n              </Row>\n            </Jumbotron>\n          </>\n          ) : null }\n      </div>\n      <div className=\"NewInference\">\n        <form>\n          <FormGroup controlId=\"imageFile\">\n            <ControlLabel>Choose an image to process (jpg or png)</ControlLabel>\n            <FormControl onChange={handleFileChange} type=\"file\" />\n          </FormGroup>\n          <p>{ inferenceStatus }</p>\n        </form>\n      </div>\n      <div className=\"Button\">\n        <form onSubmit={handleSubmit}>\n        <LoaderButton\n            type=\"submit\"\n            bsSize=\"large\"\n            bsStyle=\"danger\"\n            isLoading={isLoading}\n           \n          >\n          Detect objects\n          </LoaderButton>\n        </form>\n      </div>\n      <img class=\"center\" src={outputImage == \"\" ? \"\" : `data:image/png;base64,${outputImage}`} />\n    </body>\n  );\n  }\n","import React, { useState, useEffect } from \"react\";\nimport { PageHeader, ListGroup, ListGroupItem } from \"react-bootstrap\";\nimport { onError } from \"../libs/errorLib\";\nimport \"./Result.css\";\nimport { Link } from \"react-router-dom\";\n\n\nexport default function Result() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [result, setResult] = useState([]);\n\n\n  return (\n    <div className=\"Home\">\n     <p>This is my result: { result }</p>\n     \n    </div>\n  );\n}","import React, { useState } from \"react\";\nimport { Panel, Col, Row, Grid } from \"react-bootstrap\";\nimport ImageMapper from 'react-image-mapper';\n\nimport \"./Architecture.css\";\n\nexport default function Architecture() {\n\n  // const URL = \"https://demo-object-detection-app.s3.amazonaws.com/architecture3.png\";\n  const URL = \"https://github.com/molly-moon/app-object-detection/raw/master/architecture.png\";\n  \n  const MAP = {\n    name: \"my-map\",\n    areas: [\n      { name: \"1\", shape: \"circle\", coords: [133,59,10], strokeColor: \"red\" },\n      { name: \"2\", shape: \"circle\", coords: [247,197.5,10], strokeColor: \"red\"  },\n      { name: \"3\", shape: \"circle\", coords: [484,198,10], strokeColor: \"red\"  },\n      { name: \"4\", shape: \"circle\", coords: [620,331,10], strokeColor: \"red\"  },\n      { name: \"5\", shape: \"circle\", coords: [485,259,10], strokeColor: \"red\" },\n      { name: \"6\", shape: \"circle\", coords: [248,259,10], strokeColor: \"red\" },\n    ]\n  };\n\n\n  const panelContent = {\n    \"header\": [\"The back-end is built on top of Serverless Node.js Starter, a part of \", (<a href=\"https://serverless-stack.com\">Serverless Stack</a>), \", an open-source project developed by Anomaly Innovations. \\\n                They created a step-by-step guide to help you build a full-stack serverless application hosted on AWS. \\n \\\n                The front-end is a single page app build on top of \", (<a href=\"https://github.com/facebook/create-react-app\">Create React App project</a>), \" developed by Facebook.\"],\n\n    \"1\": \"The browser downloads and stores the static content used by this website. \\\n          The user interface was built with React.js, and server-side JavaScript execution is possible thanks to Node.js runtime. \\\n          Open-source AWS framework Amplify is used to handle API calls.\",\n          \n    \"2\": \"With the click of a button the uploaded image is base64 encoded for safe transport through the web \\\n          and AWS Amplify makes a REST API call to API Gateway, which is set up as Lambda Proxy integration.\",\n\n    \"3\": [\"API Gateway invokes Lambda function that hosts Python code used to detect objects on input images. \\\n          The inference code uses \", (<a href=\"https://pjreddie.com/darknet/yolov2/\">YOLOv2</a>), \" , a deep learning model created by Joseph Redmon. \\\n          The keras implementation of YOLOv2 I use in this project is one of my assignments from \", \n          (<a href=\"https://www.coursera.org/specializations/deep-learning?utm_source=gg&utm_medium=sem&utm_content=17-DeepLearning-LATAM&campaignid=6516520287&adgroupid=77982690923&device=c&keyword=coursera%20deep%20learning%20ai&matchtype=b&network=g&devicemodel=&adpostion=&creativeid=383382632097&hide_mobile_promo&gclid=CjwKCAjwkJj6BRA-EiwA0ZVPVg2MCerBH5g0Hh03wK0ESxG68Ty0ulraJbtGfk9VcnZs95aaIdgyrRoCLY4QAvD_BwE\">Deep Learning Specialization course</a>), \n          \" created by deeplearning.ai. The course assignment was greatly inspired by \", (<a href=\"https://github.com/allanzelener/YAD2K\">Yet Another Darknet 2 Keras project</a>), \" by Allan Zelener. \\\n          YOLOv2 detects thousands of potential objects on the input image by specifying bounding box coordinates relative to image dimensions. \\\n          Thanks to non-max-suppression technique, Lambda outputs only the most probable predictions.\"],\n\n    \"4\": \"Due to considerable volume of machine learning libraries and model weights, all Lambda dependencies are stored on Amazon Elastic File System associated with the function.\",\n\n    \"5\": \"Lambda returns the provided input image that has been marked with bouding boxes which represent detected objects. Each bounding box features a label that classifies the detected object. For safe web transport to the user, the image is again base64 encoded.\",\n\n    \"6\": \"API Gateway via Amplify passes through the response generated by Lambda to the client browser.\"\n  };\n  \n  const panelTitle = {\n    \"header\": \"DEMO object detection app\",\n    \"1\": \"1 - Static website hosting on S3\",\n    \"2\": \"2 - API Gateway call via Amplify\",\n    \"3\": \"3 - API Lambda Proxy integration\",\n    \"4\": \"4 - Lambda intergrated with EFS for machine learning inference\",\n    \"5\": \"5 - Lambda integration response\",\n    \"6\": \"6 - API Gateway response via Amplify\"\n  };\n    \n  const [title, setTitle] = useState(panelTitle[\"header\"]);\n  const [content, setContent] = useState(panelContent[\"header\"]);\n\n  function handleClick(event) {\n    const num = event.name.toString();\n    setTitle(panelTitle[num]);\n    setContent(panelContent[num]);\n  };\n\n\n\n  return (\n    <Grid >\n      <Row className=\"row\">\n        <Col xs={6} md={4} className=\"col1\">\n          <p> Click on numbers on the diagram to learn more about the workflow.</p>\n            <Panel bsStyle=\"danger\" className=\"panel\">\n              <Panel.Heading>\n                <Panel.Title componentClass=\"h3\">\n                  {title}\n\n                </Panel.Title>\n              </Panel.Heading>\n              <Panel.Body>{content}</Panel.Body>\n            </Panel>\n        </Col>\n        <Col xs={6} md={4}>\n          <ImageMapper src={URL} map={MAP} width={794} onClick={handleClick}/>\n        </Col>\n      </Row>\n    </Grid> \n\n    );\n}","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Home from \"./containers/Home\";\nimport NotFound from \"./containers/NotFound\";\nimport NewInference from \"./containers/NewInference\";\nimport Result from \"./containers/Result\";\nimport Architecture from \"./containers/Architecture\";\n\n\nexport default function Routes() {\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <Home />\n      </Route>\n      <Route exact path=\"/inference\">\n        <NewInference />\n      </Route>\n      <Route exact path=\"/result\">\n        <Result />\n      </Route>\n      <Route exact path=\"/architecture\">\n        <Architecture />\n      </Route>\n\n      <Route>\n        <Home />\n      </Route>\n    </Switch>\n  );\n}","import React from \"react\";\nimport \"./App.css\";\nimport Routes from \"./Routes\";\nimport { Link} from \"react-router-dom\";\nimport { Nav, Navbar, NavItem } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <Navbar fluid collapseOnSelect>\n      <Navbar.Header>\n        <Navbar.Brand >\n          <Link to=\"/\">\n          <img \n          src=\"logo.jpg\" \n          alt=\"DEMO object detection app\"\n          width=\"130px\"\n          height=\"50px\"\n          />\n          </Link>\n        </Navbar.Brand>\n        < Navbar.Toggle />\n      </Navbar.Header>\n      <Navbar.Collapse>\n        <Nav pullRight>\n          \n          <LinkContainer to=\"/architecture\">\n            <NavItem>How it works</NavItem>\n          </LinkContainer>\n        </Nav>\n      </Navbar.Collapse>\n\n      </Navbar>\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router} from 'react-router-dom';\nimport { Amplify } from 'aws-amplify';\nimport config from './config.js'\n\nAmplify.configure({\n  API: {\n    endpoints: [\n      {\n        name: \"inference\",\n        endpoint: config.apiGateway.URL,\n        region: config.apiGateway.REGION\n      },\n    ]\n  }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}