{"ast":null,"code":"var _jsxFileName = \"/Users/alicjamazur/Desktop/work-in-progress/app-yolov2-client /src/containers/NewInference.js\";\nimport React, { useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport config from \"../config\";\nimport \"./NewInference.css\";\nimport { API } from \"aws-amplify\";\nimport { onError } from \"../libs/errorLib\";\nimport { Link } from \"react-router-dom\";\nimport { Jumbotron, Row, Col } from 'react-bootstrap';\nimport { Button } from 'react-bootstrap';\nimport { ProgressBar } from 'react-bootstrap';\nexport default function NewInference() {\n  const file = useRef(null);\n  const [outputImage, setOutputImage] = useState(null);\n  const [inputImage, setInputImage] = useState(null);\n  const history = useHistory();\n  const [isLoading, setIsLoading] = useState(false);\n  const [inferenceMade, setInferenceMade] = useState(false);\n\n  function handleFileChange(event) {\n    file.current = event.target.files[0];\n    console.log(file.current.type);\n\n    if (file.current.type != \"image/png\" || \"image/jpg\") {\n      alert(` Pick a JPG or PNG file `);\n      return;\n    }\n\n    var reader = new FileReader();\n    reader.readAsDataURL(file.current);\n\n    reader.onloadend = function () {\n      const base64string = reader.result; // console.log(\"Base64 String - \", base64string);\n\n      var imageBase64 = base64string.substr(base64string.indexOf(',') + 1);\n      setInputImage(imageBase64); // console.log('Base64 String without Tags- ', imageBase64);\n    };\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {\n      while (outputImage == null) {\n        let response = await inference(inputImage);\n        setOutputImage(response);\n        setInferenceMade(true);\n      }\n    } catch (e) {\n      onError(e);\n    }\n\n    setIsLoading(false);\n  }\n\n  function inference(inputImage) {\n    return API.post(\"inference\", ``, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: inputImage\n    });\n  }\n\n  function validateForm() {\n    return inputImage != null && file.type == (\"image/png\" || \"image/jpg\" || \"image/jpeg\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"body\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, inferenceMade ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Jumbotron, {\n    className: \"PostInference\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 5,\n    md: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, \"Liked it?\"), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, \"If you are curious, learn more about the architecture of the app.\")), /*#__PURE__*/React.createElement(Col, {\n    xs: 5,\n    md: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: \"sm\",\n    variant: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 19\n    }\n  }, \"Learn more\")))))) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"NewInference\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    controlId: \"imageFile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ControlLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, \"Choose an image to process (JPG or PNG)\"), /*#__PURE__*/React.createElement(FormControl, {\n    autoFocus: true,\n    size: \"lg\",\n    onChange: handleFileChange,\n    type: \"file\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, isLoading ? \"Detecting objects ...\" : \"\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LoaderButton, {\n    type: \"submit\",\n    bsSize: \"medium\",\n    bsStyle: \"danger\",\n    isLoading: isLoading,\n    disabled: inputImage == null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, \"Detect objects\"))), /*#__PURE__*/React.createElement(\"img\", {\n    src: outputImage == null ? \"\" : `data:image/png;base64,${outputImage}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }));\n} //","map":{"version":3,"sources":["/Users/alicjamazur/Desktop/work-in-progress/app-yolov2-client /src/containers/NewInference.js"],"names":["React","useRef","useState","useHistory","FormGroup","FormControl","ControlLabel","LoaderButton","config","API","onError","Link","Jumbotron","Row","Col","Button","ProgressBar","NewInference","file","outputImage","setOutputImage","inputImage","setInputImage","history","isLoading","setIsLoading","inferenceMade","setInferenceMade","handleFileChange","event","current","target","files","console","log","type","alert","reader","FileReader","readAsDataURL","onloadend","base64string","result","imageBase64","substr","indexOf","handleSubmit","preventDefault","response","inference","e","post","headers","body","validateForm"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport config from \"../config\";\nimport \"./NewInference.css\";\nimport { API } from \"aws-amplify\";\nimport { onError } from \"../libs/errorLib\";\nimport { Link } from \"react-router-dom\";\nimport {Jumbotron, Row, Col} from 'react-bootstrap'\nimport {Button} from 'react-bootstrap'\nimport {ProgressBar} from 'react-bootstrap'\n\n\nexport default function NewInference() {\n  const file = useRef(null);\n  const [outputImage, setOutputImage] = useState(null);\n  const [inputImage, setInputImage] = useState(null);\n  const history = useHistory();\n  const [isLoading, setIsLoading] = useState(false);\n  const [inferenceMade, setInferenceMade] = useState(false);\n  \n\n  function handleFileChange(event) {\n   \n    file.current = event.target.files[0];\n    console.log(file.current.type);\n    if (file.current.type != \"image/png\" || \"image/jpg\") {\n  \n      alert(\n        ` Pick a JPG or PNG file `\n      );\n      return;\n    }\n\n\n    var reader = new FileReader();\n    reader.readAsDataURL(file.current);\n    reader.onloadend = function() {\n      const base64string = reader.result;\n      // console.log(\"Base64 String - \", base64string);\n      var imageBase64 = base64string.substr(base64string.indexOf(',') + 1);\n      setInputImage(imageBase64);\n      // console.log('Base64 String without Tags- ', imageBase64);\n    }\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n  \n\n    setIsLoading(true);\n\n    try {\n\n      while (outputImage==null) {\n        let response = await inference(inputImage);\n        setOutputImage(response);\n        setInferenceMade(true);\n      }\n    } catch (e) {\n      onError(e);\n    }\n    setIsLoading(false);\n  }\n  \n  function inference(inputImage) {\n    return API.post(\"inference\", ``, {\n      headers: {\n        \"Content-Type\": \"application/json\", \n        \"Accept\": \"application/json\"\n      },\n      body: inputImage\n    });\n    \n  }\n\n  function validateForm() {\n    \n    return inputImage!=null && file.type == ( \"image/png\" || \"image/jpg\" || \"image/jpeg\" )\n  }\n\n  return (\n    <body>\n      <div>\n        {inferenceMade ? (\n          <>\n            <Jumbotron className=\"PostInference\">\n              <Row> \n                <Col xs={5} md={5}>\n                <h4>Liked it?</h4>\n                <h5>If you are curious, learn more about the architecture of the app.</h5>\n              </Col>\n              <Col xs={5} md={5}>\n                <p>\n                  <Button size=\"sm\" variant=\"primary\">Learn more</Button>\n                </p>\n              </Col>\n              </Row>\n            </Jumbotron>\n          </>\n          ) : null }\n      </div>\n      <div className=\"NewInference\">\n        <form>\n          <FormGroup controlId=\"imageFile\">\n            <ControlLabel>Choose an image to process (JPG or PNG)</ControlLabel>\n            <FormControl autoFocus size=\"lg\" onChange={handleFileChange} type=\"file\" />\n          </FormGroup>\n          <p>{ isLoading ? \"Detecting objects ...\" : \"\" }</p>\n        </form>\n      </div>\n      <div className=\"Button\">\n        <form onSubmit={handleSubmit}>\n        <LoaderButton\n            type=\"submit\"\n            bsSize=\"medium\"\n            bsStyle=\"danger\"\n            isLoading={isLoading}\n            disabled={inputImage==null}\n          >\n          Detect objects\n          </LoaderButton>\n        </form>\n      </div>\n      <img src={outputImage == null ? \"\" : `data:image/png;base64,${outputImage}`} />\n    </body>\n  );\n  }\n\n  // "]},"metadata":{},"sourceType":"module"}