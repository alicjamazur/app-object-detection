{"ast":null,"code":"var _jsxFileName = \"/Users/alicjamazur/Desktop/work-in-progress/app-yolov2-client /src/containers/NewInference.js\";\nimport React, { useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport config from \"../config\";\nimport \"./NewInference.css\";\nimport { API } from \"aws-amplify\";\nimport { onError } from \"../libs/errorLib\";\nimport { Link } from \"react-router-dom\";\nexport default function NewInference() {\n  const file = useRef(null);\n  const [result, setResult] = useState(null);\n  const [image, setImage] = useState(null);\n  const history = useHistory();\n  const [isLoading, setIsLoading] = useState(false);\n\n  function handleFileChange(event) {\n    file.current = event.target.files[0];\n    console.log(file.current);\n    var reader = new FileReader();\n    reader.readAsDataURL(file.current);\n\n    reader.onloadend = function () {\n      const base64string = reader.result; // console.log(\"Base64 String - \", base64string);\n\n      var imageBase64 = base64string.substr(base64string.indexOf(',') + 1);\n      setImage(imageBase64); // console.log('Base64 String without Tags- ', imageBase64);\n    };\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {// Method 1\n      // let response = await inference(image);\n      // let json = await response.json();\n      // Method 2\n      // inference(image).then(response => {console.log(response});\n      // Method 3\n      // setResult(json);\n      // console.log(\"API call response: \", response);\n    } catch (e) {\n      onError(e);\n    }\n\n    setIsLoading(false);\n  }\n\n  function inference(image) {\n    return API.post(\"inference\", ``, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: image\n    });\n  }\n\n  var data = result || \"Hello\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"NewInference\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    controlId: \"imageFile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ControlLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, \"File \"), /*#__PURE__*/React.createElement(FormControl, {\n    onChange: handleFileChange,\n    type: \"file\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(LoaderButton, {\n    block: true,\n    type: \"submit\",\n    bsSize: \"large\",\n    bsStyle: \"primary\",\n    isLoading: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, \"Detect\")), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, data));\n}","map":{"version":3,"sources":["/Users/alicjamazur/Desktop/work-in-progress/app-yolov2-client /src/containers/NewInference.js"],"names":["React","useRef","useState","useHistory","FormGroup","FormControl","ControlLabel","LoaderButton","config","API","onError","Link","NewInference","file","result","setResult","image","setImage","history","isLoading","setIsLoading","handleFileChange","event","current","target","files","console","log","reader","FileReader","readAsDataURL","onloadend","base64string","imageBase64","substr","indexOf","handleSubmit","preventDefault","e","inference","post","headers","body","data"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport config from \"../config\";\nimport \"./NewInference.css\";\nimport { API } from \"aws-amplify\";\nimport { onError } from \"../libs/errorLib\";\nimport { Link } from \"react-router-dom\";\n\nexport default function NewInference() {\n  const file = useRef(null);\n  const [result, setResult] = useState(null);\n  const [image, setImage] = useState(null);\n  const history = useHistory();\n  const [isLoading, setIsLoading] = useState(false);\n  \n\n  function handleFileChange(event) {\n    file.current = event.target.files[0];\n    console.log(file.current);\n\n    var reader = new FileReader();\n    reader.readAsDataURL(file.current);\n    reader.onloadend = function() {\n      const base64string = reader.result;\n      // console.log(\"Base64 String - \", base64string);\n      var imageBase64 = base64string.substr(base64string.indexOf(',') + 1);\n      setImage(imageBase64);\n      // console.log('Base64 String without Tags- ', imageBase64);\n    }\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n\n    setIsLoading(true);\n\n    try {\n    // Method 1\n    // let response = await inference(image);\n    // let json = await response.json();\n\n    // Method 2\n    // inference(image).then(response => {console.log(response});\n\n    // Method 3\n    \n    // setResult(json);\n    \n    // console.log(\"API call response: \", response);\n    } catch (e) {\n      onError(e);\n    }\n    setIsLoading(false);\n  }\n  \n  function inference(image) {\n    return API.post(\"inference\", ``, {\n      headers: {\n        \"Content-Type\": \"application/json\", \n        \"Accept\": \"application/json\"\n      },\n      body: image});\n    \n  }\n\n  \n  var data = result || \"Hello\";\n  \n  return (\n    <div className=\"NewInference\">\n\n      <form onSubmit={handleSubmit}>\n        <FormGroup controlId=\"imageFile\">\n          <ControlLabel>File </ControlLabel>\n          <FormControl onChange={handleFileChange} type=\"file\" />\n        </FormGroup>\n        <LoaderButton\n          block\n          type=\"submit\"\n          bsSize=\"large\"\n          bsStyle=\"primary\"\n          isLoading={isLoading}\n        >\n         Detect\n        </LoaderButton>\n      </form>\n      <h4>\n        {data}\n      </h4>\n    \n    </div>\n  );\n  }"]},"metadata":{},"sourceType":"module"}