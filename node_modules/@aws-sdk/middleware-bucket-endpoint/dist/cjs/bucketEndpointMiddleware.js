"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBucketEndpointPlugin = exports.bucketEndpointMiddlewareOptions = exports.bucketEndpointMiddleware = void 0;
var tslib_1 = require("tslib");
var protocol_http_1 = require("@aws-sdk/protocol-http");
var bucketHostname_1 = require("./bucketHostname");
function bucketEndpointMiddleware(options) {
    var _this = this;
    return function (next) { return function (args) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var bucketName, replaceBucketInPath, request, _a, hostname, bucketEndpoint;
        return tslib_1.__generator(this, function (_b) {
            bucketName = args.input.Bucket;
            replaceBucketInPath = options.bucketEndpoint;
            request = args.request;
            if (protocol_http_1.HttpRequest.isInstance(request)) {
                if (options.bucketEndpoint) {
                    request.hostname = bucketName;
                }
                else {
                    _a = bucketHostname_1.bucketHostname({
                        bucketName: bucketName,
                        baseHostname: request.hostname,
                        accelerateEndpoint: options.useAccelerateEndpoint,
                        dualstackEndpoint: options.useDualstackEndpoint,
                        pathStyleEndpoint: options.forcePathStyle,
                        tlsCompatible: request.protocol === "https:",
                    }), hostname = _a.hostname, bucketEndpoint = _a.bucketEndpoint;
                    request.hostname = hostname;
                    replaceBucketInPath = bucketEndpoint;
                }
                if (replaceBucketInPath) {
                    request.path = request.path.replace(/^(\/)?[^\/]+/, "");
                    if (request.path === "") {
                        request.path = "/";
                    }
                }
            }
            return [2 /*return*/, next(tslib_1.__assign(tslib_1.__assign({}, args), { request: request }))];
        });
    }); }; };
}
exports.bucketEndpointMiddleware = bucketEndpointMiddleware;
exports.bucketEndpointMiddlewareOptions = {
    step: "build",
    tags: ["BUCKET_ENDPOINT"],
    name: "bucketEndpointMiddleware",
    relation: "before",
    toMiddleware: "hostHeaderMiddleware",
};
exports.getBucketEndpointPlugin = function (options) { return ({
    applyToStack: function (clientStack) {
        clientStack.addRelativeTo(bucketEndpointMiddleware(options), exports.bucketEndpointMiddlewareOptions);
    },
}); };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVja2V0RW5kcG9pbnRNaWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2J1Y2tldEVuZHBvaW50TWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsd0RBQXFEO0FBWXJELG1EQUFrRDtBQUdsRCxTQUFnQix3QkFBd0IsQ0FBQyxPQUFxQztJQUE5RSxpQkFrQ0M7SUFqQ0MsT0FBTyxVQUFnQyxJQUErQixJQUFnQyxPQUFBLFVBQ3BHLElBQWdDOzs7WUFFaEIsVUFBVSxHQUFLLElBQUksQ0FBQyxLQUFLLE9BQWYsQ0FBZ0I7WUFDdEMsbUJBQW1CLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQztZQUMzQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUM3QixJQUFJLDJCQUFXLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNuQyxJQUFJLE9BQU8sQ0FBQyxjQUFjLEVBQUU7b0JBQzFCLE9BQU8sQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO2lCQUMvQjtxQkFBTTtvQkFDQyxLQUErQiwrQkFBYyxDQUFDO3dCQUNsRCxVQUFVLFlBQUE7d0JBQ1YsWUFBWSxFQUFFLE9BQU8sQ0FBQyxRQUFRO3dCQUM5QixrQkFBa0IsRUFBRSxPQUFPLENBQUMscUJBQXFCO3dCQUNqRCxpQkFBaUIsRUFBRSxPQUFPLENBQUMsb0JBQW9CO3dCQUMvQyxpQkFBaUIsRUFBRSxPQUFPLENBQUMsY0FBYzt3QkFDekMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxRQUFRLEtBQUssUUFBUTtxQkFDN0MsQ0FBQyxFQVBNLFFBQVEsY0FBQSxFQUFFLGNBQWMsb0JBQUEsQ0FPN0I7b0JBRUgsT0FBTyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7b0JBQzVCLG1CQUFtQixHQUFHLGNBQWMsQ0FBQztpQkFDdEM7Z0JBRUQsSUFBSSxtQkFBbUIsRUFBRTtvQkFDdkIsT0FBTyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsRUFBRSxDQUFDLENBQUM7b0JBQ3hELElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxFQUFFLEVBQUU7d0JBQ3ZCLE9BQU8sQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO3FCQUNwQjtpQkFDRjthQUNGO1lBRUQsc0JBQU8sSUFBSSx1Q0FBTSxJQUFJLEtBQUUsT0FBTyxTQUFBLElBQUcsRUFBQzs7U0FDbkMsRUFoQ3FHLENBZ0NyRyxDQUFDO0FBQ0osQ0FBQztBQWxDRCw0REFrQ0M7QUFFWSxRQUFBLCtCQUErQixHQUFxRDtJQUMvRixJQUFJLEVBQUUsT0FBTztJQUNiLElBQUksRUFBRSxDQUFDLGlCQUFpQixDQUFDO0lBQ3pCLElBQUksRUFBRSwwQkFBMEI7SUFDaEMsUUFBUSxFQUFFLFFBQVE7SUFDbEIsWUFBWSxFQUFFLHNCQUFzQjtDQUNyQyxDQUFDO0FBRVcsUUFBQSx1QkFBdUIsR0FBRyxVQUFDLE9BQXFDLElBQTBCLE9BQUEsQ0FBQztJQUN0RyxZQUFZLEVBQUUsVUFBQyxXQUFXO1FBQ3hCLFdBQVcsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsT0FBTyxDQUFDLEVBQUUsdUNBQStCLENBQUMsQ0FBQztJQUNoRyxDQUFDO0NBQ0YsQ0FBQyxFQUpxRyxDQUlyRyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cFJlcXVlc3QgfSBmcm9tIFwiQGF3cy1zZGsvcHJvdG9jb2wtaHR0cFwiO1xuaW1wb3J0IHtcbiAgQnVpbGRIYW5kbGVyLFxuICBCdWlsZEhhbmRsZXJBcmd1bWVudHMsXG4gIEJ1aWxkSGFuZGxlck9wdGlvbnMsXG4gIEJ1aWxkSGFuZGxlck91dHB1dCxcbiAgQnVpbGRNaWRkbGV3YXJlLFxuICBNZXRhZGF0YUJlYXJlcixcbiAgUGx1Z2dhYmxlLFxuICBSZWxhdGl2ZUxvY2F0aW9uLFxufSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuaW1wb3J0IHsgYnVja2V0SG9zdG5hbWUgfSBmcm9tIFwiLi9idWNrZXRIb3N0bmFtZVwiO1xuaW1wb3J0IHsgQnVja2V0RW5kcG9pbnRSZXNvbHZlZENvbmZpZyB9IGZyb20gXCIuL2NvbmZpZ3VyYXRpb25zXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBidWNrZXRFbmRwb2ludE1pZGRsZXdhcmUob3B0aW9uczogQnVja2V0RW5kcG9pbnRSZXNvbHZlZENvbmZpZyk6IEJ1aWxkTWlkZGxld2FyZTxhbnksIGFueT4ge1xuICByZXR1cm4gPE91dHB1dCBleHRlbmRzIE1ldGFkYXRhQmVhcmVyPihuZXh0OiBCdWlsZEhhbmRsZXI8YW55LCBPdXRwdXQ+KTogQnVpbGRIYW5kbGVyPGFueSwgT3V0cHV0PiA9PiBhc3luYyAoXG4gICAgYXJnczogQnVpbGRIYW5kbGVyQXJndW1lbnRzPGFueT5cbiAgKTogUHJvbWlzZTxCdWlsZEhhbmRsZXJPdXRwdXQ8T3V0cHV0Pj4gPT4ge1xuICAgIGNvbnN0IHsgQnVja2V0OiBidWNrZXROYW1lIH0gPSBhcmdzLmlucHV0O1xuICAgIGxldCByZXBsYWNlQnVja2V0SW5QYXRoID0gb3B0aW9ucy5idWNrZXRFbmRwb2ludDtcbiAgICBjb25zdCByZXF1ZXN0ID0gYXJncy5yZXF1ZXN0O1xuICAgIGlmIChIdHRwUmVxdWVzdC5pc0luc3RhbmNlKHJlcXVlc3QpKSB7XG4gICAgICBpZiAob3B0aW9ucy5idWNrZXRFbmRwb2ludCkge1xuICAgICAgICByZXF1ZXN0Lmhvc3RuYW1lID0gYnVja2V0TmFtZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHsgaG9zdG5hbWUsIGJ1Y2tldEVuZHBvaW50IH0gPSBidWNrZXRIb3N0bmFtZSh7XG4gICAgICAgICAgYnVja2V0TmFtZSxcbiAgICAgICAgICBiYXNlSG9zdG5hbWU6IHJlcXVlc3QuaG9zdG5hbWUsXG4gICAgICAgICAgYWNjZWxlcmF0ZUVuZHBvaW50OiBvcHRpb25zLnVzZUFjY2VsZXJhdGVFbmRwb2ludCxcbiAgICAgICAgICBkdWFsc3RhY2tFbmRwb2ludDogb3B0aW9ucy51c2VEdWFsc3RhY2tFbmRwb2ludCxcbiAgICAgICAgICBwYXRoU3R5bGVFbmRwb2ludDogb3B0aW9ucy5mb3JjZVBhdGhTdHlsZSxcbiAgICAgICAgICB0bHNDb21wYXRpYmxlOiByZXF1ZXN0LnByb3RvY29sID09PSBcImh0dHBzOlwiLFxuICAgICAgICB9KTtcblxuICAgICAgICByZXF1ZXN0Lmhvc3RuYW1lID0gaG9zdG5hbWU7XG4gICAgICAgIHJlcGxhY2VCdWNrZXRJblBhdGggPSBidWNrZXRFbmRwb2ludDtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlcGxhY2VCdWNrZXRJblBhdGgpIHtcbiAgICAgICAgcmVxdWVzdC5wYXRoID0gcmVxdWVzdC5wYXRoLnJlcGxhY2UoL14oXFwvKT9bXlxcL10rLywgXCJcIik7XG4gICAgICAgIGlmIChyZXF1ZXN0LnBhdGggPT09IFwiXCIpIHtcbiAgICAgICAgICByZXF1ZXN0LnBhdGggPSBcIi9cIjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXh0KHsgLi4uYXJncywgcmVxdWVzdCB9KTtcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGJ1Y2tldEVuZHBvaW50TWlkZGxld2FyZU9wdGlvbnM6IEJ1aWxkSGFuZGxlck9wdGlvbnMgJiBSZWxhdGl2ZUxvY2F0aW9uPGFueSwgYW55PiA9IHtcbiAgc3RlcDogXCJidWlsZFwiLFxuICB0YWdzOiBbXCJCVUNLRVRfRU5EUE9JTlRcIl0sXG4gIG5hbWU6IFwiYnVja2V0RW5kcG9pbnRNaWRkbGV3YXJlXCIsXG4gIHJlbGF0aW9uOiBcImJlZm9yZVwiLFxuICB0b01pZGRsZXdhcmU6IFwiaG9zdEhlYWRlck1pZGRsZXdhcmVcIixcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRCdWNrZXRFbmRwb2ludFBsdWdpbiA9IChvcHRpb25zOiBCdWNrZXRFbmRwb2ludFJlc29sdmVkQ29uZmlnKTogUGx1Z2dhYmxlPGFueSwgYW55PiA9PiAoe1xuICBhcHBseVRvU3RhY2s6IChjbGllbnRTdGFjaykgPT4ge1xuICAgIGNsaWVudFN0YWNrLmFkZFJlbGF0aXZlVG8oYnVja2V0RW5kcG9pbnRNaWRkbGV3YXJlKG9wdGlvbnMpLCBidWNrZXRFbmRwb2ludE1pZGRsZXdhcmVPcHRpb25zKTtcbiAgfSxcbn0pO1xuIl19