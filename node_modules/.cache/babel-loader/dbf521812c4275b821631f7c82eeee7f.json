{"ast":null,"code":"var _jsxFileName = \"/Users/alicjamazur/Desktop/work-in-progress/app-yolov2-client /src/containers/NewInference.js\";\nimport React, { useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport config from \"../config\";\nimport \"./NewInference.css\";\nimport { API } from \"aws-amplify\";\nimport { onError } from \"../libs/errorLib\";\nimport { Link } from \"react-router-dom\";\nimport { Jumbotron, Row, Col } from 'react-bootstrap';\nimport { Button } from 'react-bootstrap';\nimport { ProgressBar } from 'react-bootstrap';\nexport default function NewInference() {\n  const file = useRef(null);\n  const [outputImage, setOutputImage] = useState(null);\n  const [inputImage, setInputImage] = useState(null);\n  const history = useHistory();\n  const [isLoading, setIsLoading] = useState(false);\n  const [inferenceMade, setInferenceMade] = useState(false);\n  const [fileLoaded, setFileLoaded] = useState(false);\n  const [coldStart, setColdStart] = useState(false); // Handle image submission\n\n  function handleFileChange(event) {\n    if (file.current == null) {\n      file.current = event.target.files[0];\n      setFileLoaded(true);\n      console.log(file.current.type);\n    }\n  } // Make inference \n\n\n  async function handleSubmit(event) {\n    event.preventDefault(); // Validate input file\n\n    if (file.current && file.ccurrent.type != \"image/png\" && file.current.type != \"image/jpeg\") {\n      alert(` Pick a JPG or PNG file `);\n      return;\n    }\n\n    ;\n    setIsLoading(true); // Convert image to base64\n\n    var reader = new FileReader();\n    reader.readAsDataURL(file.current);\n\n    reader.onloadend = function () {\n      const base64string = reader.result; // console.log(\"Base64 String - \", base64string);\n\n      var imageBase64 = base64string.substr(base64string.indexOf(',') + 1);\n      setInputImage(imageBase64); // console.log('Base64 String without Tags- ', imageBase64);\n    };\n\n    setIsLoading(true);\n\n    try {\n      const response = await inference(inputImage);\n    } catch (e) {\n      onError(e); //handleSubmit(event);\n    }\n\n    setIsLoading(false);\n  } // New API call \n\n\n  async function inference2(inputImage) {\n    try {\n      const response = await API.post(\"inference\", ``, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: inputImage\n      });\n      setOutputImage(response);\n      setInferenceMade(true);\n    } catch (e) {\n      const coldStart = onError(e); // Handle cold start\n\n      if (coldStart) {\n        setColdStart(true);\n        console.log(\"Cold start!\"); // while (outputImage == null) {\n        //   let response = await inference(inputImage);\n        //   setOutputImage(response);\n        //   setInferenceMade(true);\n        // }\n      }\n    }\n\n    return;\n  } // API call with Amplify\n\n\n  function inference(inputImage) {\n    return API.post(\"inference\", ``, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: inputImage\n    });\n  } // Render webpage\n\n\n  return /*#__PURE__*/React.createElement(\"body\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, inferenceMade ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Jumbotron, {\n    className: \"PostInference\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 5,\n    md: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }, \"Liked it?\"), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }, \"If you are curious, learn more about the architecture of this app.\")), /*#__PURE__*/React.createElement(Col, {\n    xs: 5,\n    md: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: \"sm\",\n    variant: \"primary\",\n    href: \"/architecture\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 19\n    }\n  }, \"Learn more\")))))) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"NewInference\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    controlId: \"imageFile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ControlLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, \"Choose an image to process (JPG or PNG)\"), /*#__PURE__*/React.createElement(FormControl, {\n    autoFocus: true,\n    onChange: handleFileChange,\n    type: \"file\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, isLoading ? \"Detecting objects ...\" : \"\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, coldStart ? \"Warming up AWS Lambda..\" : \"\", \" \"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LoaderButton, {\n    type: \"submit\",\n    bsSize: \"medium\",\n    bsStyle: \"danger\",\n    isLoading: isLoading,\n    disabled: !fileLoaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, \"Detect objects\"))), /*#__PURE__*/React.createElement(\"img\", {\n    src: outputImage == null ? \"\" : `data:image/png;base64,${outputImage}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/alicjamazur/Desktop/work-in-progress/app-yolov2-client /src/containers/NewInference.js"],"names":["React","useRef","useState","useHistory","FormGroup","FormControl","ControlLabel","LoaderButton","config","API","onError","Link","Jumbotron","Row","Col","Button","ProgressBar","NewInference","file","outputImage","setOutputImage","inputImage","setInputImage","history","isLoading","setIsLoading","inferenceMade","setInferenceMade","fileLoaded","setFileLoaded","coldStart","setColdStart","handleFileChange","event","current","target","files","console","log","type","handleSubmit","preventDefault","ccurrent","alert","reader","FileReader","readAsDataURL","onloadend","base64string","result","imageBase64","substr","indexOf","response","inference","e","inference2","post","headers","body"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport LoaderButton from \"../components/LoaderButton\";\nimport config from \"../config\";\nimport \"./NewInference.css\";\nimport { API } from \"aws-amplify\";\nimport { onError } from \"../libs/errorLib\";\nimport { Link } from \"react-router-dom\";\nimport {Jumbotron, Row, Col} from 'react-bootstrap'\nimport {Button} from 'react-bootstrap'\nimport {ProgressBar} from 'react-bootstrap'\n\n\nexport default function NewInference() {\n  const file = useRef(null);\n  const [outputImage, setOutputImage] = useState(null);\n  const [inputImage, setInputImage] = useState(null);\n  const history = useHistory();\n  const [isLoading, setIsLoading] = useState(false);\n  const [inferenceMade, setInferenceMade] = useState(false);\n  const [fileLoaded, setFileLoaded] = useState(false);\n  const [coldStart, setColdStart] = useState(false);\n  \n  // Handle image submission\n  function handleFileChange(event) {\n    if (file.current == null) {\n      file.current = event.target.files[0];\n      setFileLoaded(true);\n      console.log(file.current.type);\n    }\n  }\n\n  // Make inference \n  async function handleSubmit(event) {\n    event.preventDefault();\n    \n    // Validate input file\n    if (file.current && (file.ccurrent.type != \"image/png\" && file.current.type != \"image/jpeg\")) {\n      alert(\n      ` Pick a JPG or PNG file `)\n    return;\n    };\n    \n    setIsLoading(true);\n\n    // Convert image to base64\n    var reader = new FileReader();\n    reader.readAsDataURL(file.current);\n    reader.onloadend = function() {\n    const base64string = reader.result;\n    // console.log(\"Base64 String - \", base64string);\n    var imageBase64 = base64string.substr(base64string.indexOf(',') + 1);\n    setInputImage(imageBase64);\n    // console.log('Base64 String without Tags- ', imageBase64);\n    }\n\n    setIsLoading(true);\n\n    try {\n      const response = await inference(inputImage);\n      \n    } catch (e) {\n      onError(e);\n      //handleSubmit(event);\n      }\n\n    setIsLoading(false);\n  }\n  \n  // New API call \n\n  async function inference2(inputImage) {\n    try {\n      const response = await API.post(\"inference\", ``, {\n      headers: {\n        \"Content-Type\": \"application/json\", \n        \"Accept\": \"application/json\"\n      },\n      body: inputImage\n      });\n      setOutputImage(response);\n      setInferenceMade(true);\n    } catch (e) {\n      const coldStart = onError(e);\n\n      // Handle cold start\n      if (coldStart) {\n        setColdStart(true);\n        console.log(\"Cold start!\");\n\n        // while (outputImage == null) {\n        //   let response = await inference(inputImage);\n        //   setOutputImage(response);\n        //   setInferenceMade(true);\n        // }\n      }\n    }\n\n    return \n  }\n\n  // API call with Amplify\n  function inference(inputImage) {\n    return API.post(\"inference\", ``, {\n      headers: {\n        \"Content-Type\": \"application/json\", \n        \"Accept\": \"application/json\"\n      },\n      body: inputImage\n    });\n  }\n\n\n  // Render webpage\n  return (\n    <body>\n      <div>\n        {inferenceMade ? (\n          <>\n            <Jumbotron className=\"PostInference\">\n              <Row> \n                <Col xs={5} md={5}>\n                <h4>Liked it?</h4>\n                <h5>If you are curious, learn more about the architecture of this app.</h5>\n              </Col>\n              <Col xs={5} md={5}>\n                <p>\n                  <Button size=\"sm\" variant=\"primary\" href=\"/architecture\">Learn more</Button>\n                </p>\n              </Col>\n              </Row>\n            </Jumbotron>\n          </>\n          ) : null }\n      </div>\n      <div className=\"NewInference\">\n        <form>\n          <FormGroup controlId=\"imageFile\">\n            <ControlLabel>Choose an image to process (JPG or PNG)</ControlLabel>\n            <FormControl autoFocus onChange={handleFileChange} type=\"file\" />\n          </FormGroup>\n          <p>{ isLoading ? \"Detecting objects ...\" : \"\" }</p>\n          <p>{ coldStart ? \"Warming up AWS Lambda..\" : \"\" } </p>\n        </form>\n      </div>\n      <div className=\"Button\">\n        <form onSubmit={handleSubmit}>\n        <LoaderButton\n            type=\"submit\"\n            bsSize=\"medium\"\n            bsStyle=\"danger\"\n            isLoading={isLoading}\n            disabled={!fileLoaded}\n          >\n          Detect objects\n          </LoaderButton>\n        </form>\n      </div>\n      <img src={outputImage == null ? \"\" : `data:image/png;base64,${outputImage}`} />\n    </body>\n  );\n  }\n"]},"metadata":{},"sourceType":"module"}