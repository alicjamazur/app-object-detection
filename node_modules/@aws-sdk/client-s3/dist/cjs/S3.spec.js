"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference types="mocha" />
const chai_1 = require("chai");
const S3_1 = require("./S3");
describe("endpoint", () => {
    it("users can override endpoint from client.", async () => {
        //use s3 here but all the clients are generated similarly
        const endpointValidator = (next) => (args) => {
            // middleware intercept the request and return it early
            const request = args.request;
            chai_1.expect(request.protocol).to.equal("http:");
            chai_1.expect(request.hostname).to.equal("localhost");
            chai_1.expect(request.port).to.equal(8080);
            //query and path should not be overwritten
            chai_1.expect(request.query).not.to.contain({ foo: "bar" });
            chai_1.expect(request.path).not.to.equal("/path");
            return Promise.resolve({ output: {}, response: {} });
        };
        const client = new S3_1.S3({ endpoint: "http://localhost:8080/path?foo=bar" });
        client.middlewareStack.add(endpointValidator, {
            step: "serialize",
            name: "endpointValidator",
            priority: "low",
        });
        return await client.putObject({
            Bucket: "bucket",
            Key: "key",
            Body: "body",
        });
    });
});
//# sourceMappingURL=S3.spec.js.map