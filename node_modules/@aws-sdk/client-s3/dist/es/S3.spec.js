import { __awaiter, __generator } from "tslib";
/// <reference types="mocha" />
import { expect } from "chai";
import { S3 } from "./S3";
describe("endpoint", function () {
    it("users can override endpoint from client.", function () { return __awaiter(void 0, void 0, void 0, function () {
        var endpointValidator, client;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    endpointValidator = function (next) { return function (args) {
                        // middleware intercept the request and return it early
                        var request = args.request;
                        expect(request.protocol).to.equal("http:");
                        expect(request.hostname).to.equal("localhost");
                        expect(request.port).to.equal(8080);
                        //query and path should not be overwritten
                        expect(request.query).not.to.contain({ foo: "bar" });
                        expect(request.path).not.to.equal("/path");
                        return Promise.resolve({ output: {}, response: {} });
                    }; };
                    client = new S3({ endpoint: "http://localhost:8080/path?foo=bar" });
                    client.middlewareStack.add(endpointValidator, {
                        step: "serialize",
                        name: "endpointValidator",
                        priority: "low",
                    });
                    return [4 /*yield*/, client.putObject({
                            Bucket: "bucket",
                            Key: "key",
                            Body: "body",
                        })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    }); });
});
//# sourceMappingURL=S3.spec.js.map