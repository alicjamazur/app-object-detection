"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.retryModeProvider = exports.maxAttemptsProvider = exports.CONFIG_RETRY_MODE = exports.ENV_RETRY_MODE = exports.CONFIG_MAX_ATTEMPTS = exports.ENV_MAX_ATTEMPTS = void 0;
var middleware_retry_1 = require("@aws-sdk/middleware-retry");
var property_provider_1 = require("@aws-sdk/property-provider");
var fromEnv_1 = require("./fromEnv");
var fromSharedConfigFiles_1 = require("./fromSharedConfigFiles");
exports.ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
exports.CONFIG_MAX_ATTEMPTS = "max_attempts";
exports.ENV_RETRY_MODE = "AWS_RETRY_MODE";
exports.CONFIG_RETRY_MODE = "retry_mode";
var defaultProvider = function (configuration, _a) {
    if (configuration === void 0) { configuration = {}; }
    var envVarName = _a.envVarName, configKey = _a.configKey, defaultValue = _a.defaultValue;
    return property_provider_1.memoize(property_provider_1.chain(fromEnv_1.fromEnv(envVarName), fromSharedConfigFiles_1.fromSharedConfigFiles(configuration, configKey), property_provider_1.fromStatic(defaultValue)));
};
exports.maxAttemptsProvider = function (configuration) {
    if (configuration === void 0) { configuration = {}; }
    return defaultProvider(configuration, {
        envVarName: exports.ENV_MAX_ATTEMPTS,
        configKey: exports.CONFIG_MAX_ATTEMPTS,
        defaultValue: middleware_retry_1.DEFAULT_MAX_ATTEMPTS,
    });
};
exports.retryModeProvider = function (configuration) {
    if (configuration === void 0) { configuration = {}; }
    return defaultProvider(configuration, {
        envVarName: exports.ENV_RETRY_MODE,
        configKey: exports.CONFIG_RETRY_MODE,
        defaultValue: middleware_retry_1.DEFAULT_RETRY_MODE,
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdFByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2RlZmF1bHRQcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4REFBcUY7QUFDckYsZ0VBQXdFO0FBR3hFLHFDQUFvQztBQUNwQyxpRUFBa0Y7QUFFckUsUUFBQSxnQkFBZ0IsR0FBRyxrQkFBa0IsQ0FBQztBQUN0QyxRQUFBLG1CQUFtQixHQUFHLGNBQWMsQ0FBQztBQUVyQyxRQUFBLGNBQWMsR0FBRyxnQkFBZ0IsQ0FBQztBQUNsQyxRQUFBLGlCQUFpQixHQUFHLFlBQVksQ0FBQztBQUU5QyxJQUFNLGVBQWUsR0FBRyxVQUN0QixhQUFvQyxFQUNwQyxFQVFDO0lBVEQsOEJBQUEsRUFBQSxrQkFBb0M7UUFFbEMsVUFBVSxnQkFBQSxFQUNWLFNBQVMsZUFBQSxFQUNULFlBQVksa0JBQUE7SUFPZCxPQUFBLDJCQUFPLENBQUMseUJBQUssQ0FBQyxpQkFBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLDZDQUFxQixDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsRUFBRSw4QkFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7QUFBOUcsQ0FBOEcsQ0FBQztBQUVwRyxRQUFBLG1CQUFtQixHQUFHLFVBQUMsYUFBb0M7SUFBcEMsOEJBQUEsRUFBQSxrQkFBb0M7SUFDdEUsT0FBQSxlQUFlLENBQUMsYUFBYSxFQUFFO1FBQzdCLFVBQVUsRUFBRSx3QkFBZ0I7UUFDNUIsU0FBUyxFQUFFLDJCQUFtQjtRQUM5QixZQUFZLEVBQUUsdUNBQW9CO0tBQ25DLENBQUM7QUFKRixDQUlFLENBQUM7QUFFUSxRQUFBLGlCQUFpQixHQUFHLFVBQUMsYUFBb0M7SUFBcEMsOEJBQUEsRUFBQSxrQkFBb0M7SUFDcEUsT0FBQSxlQUFlLENBQUMsYUFBYSxFQUFFO1FBQzdCLFVBQVUsRUFBRSxzQkFBYztRQUMxQixTQUFTLEVBQUUseUJBQWlCO1FBQzVCLFlBQVksRUFBRSxxQ0FBa0I7S0FDakMsQ0FBQztBQUpGLENBSUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERFRkFVTFRfTUFYX0FUVEVNUFRTLCBERUZBVUxUX1JFVFJZX01PREUgfSBmcm9tIFwiQGF3cy1zZGsvbWlkZGxld2FyZS1yZXRyeVwiO1xuaW1wb3J0IHsgY2hhaW4sIGZyb21TdGF0aWMsIG1lbW9pemUgfSBmcm9tIFwiQGF3cy1zZGsvcHJvcGVydHktcHJvdmlkZXJcIjtcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5cbmltcG9ydCB7IGZyb21FbnYgfSBmcm9tIFwiLi9mcm9tRW52XCI7XG5pbXBvcnQgeyBmcm9tU2hhcmVkQ29uZmlnRmlsZXMsIFNoYXJlZENvbmZpZ0luaXQgfSBmcm9tIFwiLi9mcm9tU2hhcmVkQ29uZmlnRmlsZXNcIjtcblxuZXhwb3J0IGNvbnN0IEVOVl9NQVhfQVRURU1QVFMgPSBcIkFXU19NQVhfQVRURU1QVFNcIjtcbmV4cG9ydCBjb25zdCBDT05GSUdfTUFYX0FUVEVNUFRTID0gXCJtYXhfYXR0ZW1wdHNcIjtcblxuZXhwb3J0IGNvbnN0IEVOVl9SRVRSWV9NT0RFID0gXCJBV1NfUkVUUllfTU9ERVwiO1xuZXhwb3J0IGNvbnN0IENPTkZJR19SRVRSWV9NT0RFID0gXCJyZXRyeV9tb2RlXCI7XG5cbmNvbnN0IGRlZmF1bHRQcm92aWRlciA9IChcbiAgY29uZmlndXJhdGlvbjogU2hhcmVkQ29uZmlnSW5pdCA9IHt9LFxuICB7XG4gICAgZW52VmFyTmFtZSxcbiAgICBjb25maWdLZXksXG4gICAgZGVmYXVsdFZhbHVlLFxuICB9OiB7XG4gICAgZW52VmFyTmFtZTogc3RyaW5nO1xuICAgIGNvbmZpZ0tleTogc3RyaW5nO1xuICAgIGRlZmF1bHRWYWx1ZTogc3RyaW5nO1xuICB9XG4pOiBQcm92aWRlcjxzdHJpbmc+ID0+XG4gIG1lbW9pemUoY2hhaW4oZnJvbUVudihlbnZWYXJOYW1lKSwgZnJvbVNoYXJlZENvbmZpZ0ZpbGVzKGNvbmZpZ3VyYXRpb24sIGNvbmZpZ0tleSksIGZyb21TdGF0aWMoZGVmYXVsdFZhbHVlKSkpO1xuXG5leHBvcnQgY29uc3QgbWF4QXR0ZW1wdHNQcm92aWRlciA9IChjb25maWd1cmF0aW9uOiBTaGFyZWRDb25maWdJbml0ID0ge30pOiBQcm92aWRlcjxzdHJpbmc+ID0+XG4gIGRlZmF1bHRQcm92aWRlcihjb25maWd1cmF0aW9uLCB7XG4gICAgZW52VmFyTmFtZTogRU5WX01BWF9BVFRFTVBUUyxcbiAgICBjb25maWdLZXk6IENPTkZJR19NQVhfQVRURU1QVFMsXG4gICAgZGVmYXVsdFZhbHVlOiBERUZBVUxUX01BWF9BVFRFTVBUUyxcbiAgfSk7XG5cbmV4cG9ydCBjb25zdCByZXRyeU1vZGVQcm92aWRlciA9IChjb25maWd1cmF0aW9uOiBTaGFyZWRDb25maWdJbml0ID0ge30pOiBQcm92aWRlcjxzdHJpbmc+ID0+XG4gIGRlZmF1bHRQcm92aWRlcihjb25maWd1cmF0aW9uLCB7XG4gICAgZW52VmFyTmFtZTogRU5WX1JFVFJZX01PREUsXG4gICAgY29uZmlnS2V5OiBDT05GSUdfUkVUUllfTU9ERSxcbiAgICBkZWZhdWx0VmFsdWU6IERFRkFVTFRfUkVUUllfTU9ERSxcbiAgfSk7XG4iXX0=